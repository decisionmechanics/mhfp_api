<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="426" onload="init(evt)" viewBox="0 0 1200 426" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="426" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -F -o profile.svg -- python UI_economic_benefits.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="415.00"> </text><svg id="frames" x="10" width="1180" total_samples="19226"><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1022) (25 samples, 0.13%)</title><rect x="0.0000%" y="84" width="0.1300%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="25"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:987) (25 samples, 0.13%)</title><rect x="0.0000%" y="100" width="0.1300%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="25"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:664) (25 samples, 0.13%)</title><rect x="0.0000%" y="116" width="0.1300%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="25"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:877) (25 samples, 0.13%)</title><rect x="0.0000%" y="132" width="0.1300%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="25"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:233) (25 samples, 0.13%)</title><rect x="0.0000%" y="148" width="0.1300%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="25"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:1) (20 samples, 0.10%)</title><rect x="0.0260%" y="164" width="0.1040%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="20"/><text x="0.2760%" y="174.50"></text></g><g><title>_getitem_tuple_same_dim (pandas/core/indexing.py:912) (29 samples, 0.15%)</title><rect x="0.3901%" y="148" width="0.1508%" height="15" fill="rgb(207,160,47)" fg:x="75" fg:w="29"/><text x="0.6401%" y="158.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1277) (29 samples, 0.15%)</title><rect x="0.3901%" y="164" width="0.1508%" height="15" fill="rgb(228,23,34)" fg:x="75" fg:w="29"/><text x="0.6401%" y="174.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1060) (41 samples, 0.21%)</title><rect x="0.3329%" y="116" width="0.2133%" height="15" fill="rgb(218,30,26)" fg:x="64" fg:w="41"/><text x="0.5829%" y="126.50"></text></g><g><title>_getitem_tuple (pandas/core/indexing.py:1245) (33 samples, 0.17%)</title><rect x="0.3745%" y="132" width="0.1716%" height="15" fill="rgb(220,122,19)" fg:x="72" fg:w="33"/><text x="0.6245%" y="142.50"></text></g><g><title>__init__ (openpyxl/reader/excel.py:122) (21 samples, 0.11%)</title><rect x="0.7230%" y="244" width="0.1092%" height="15" fill="rgb(250,228,42)" fg:x="139" fg:w="21"/><text x="0.9730%" y="254.50"></text></g><g><title>_validate_archive (openpyxl/reader/excel.py:67) (21 samples, 0.11%)</title><rect x="0.7230%" y="260" width="0.1092%" height="15" fill="rgb(240,193,28)" fg:x="139" fg:w="21"/><text x="0.9730%" y="270.50"></text></g><g><title>__init__ (zipfile.py:1216) (21 samples, 0.11%)</title><rect x="0.7230%" y="276" width="0.1092%" height="15" fill="rgb(216,20,37)" fg:x="139" fg:w="21"/><text x="0.9730%" y="286.50"></text></g><g><title>_RealGetContents (zipfile.py:1326) (21 samples, 0.11%)</title><rect x="0.7230%" y="292" width="0.1092%" height="15" fill="rgb(206,188,39)" fg:x="139" fg:w="21"/><text x="0.9730%" y="302.50"></text></g><g><title>XML (xml/etree/ElementTree.py:1329) (65 samples, 0.34%)</title><rect x="0.8790%" y="276" width="0.3381%" height="15" fill="rgb(217,207,13)" fg:x="169" fg:w="65"/><text x="1.1290%" y="286.50"></text></g><g><title>__init__ (openpyxl/utils/indexed_list.py:14) (21 samples, 0.11%)</title><rect x="1.2171%" y="276" width="0.1092%" height="15" fill="rgb(231,73,38)" fg:x="234" fg:w="21"/><text x="1.4671%" y="286.50"></text></g><g><title>bind (openpyxl/styles/named_styles.py:106) (27 samples, 0.14%)</title><rect x="1.3315%" y="276" width="0.1404%" height="15" fill="rgb(225,20,46)" fg:x="256" fg:w="27"/><text x="1.5815%" y="286.50"></text></g><g><title>_recalculate (openpyxl/styles/named_styles.py:114) (27 samples, 0.14%)</title><rect x="1.3315%" y="292" width="0.1404%" height="15" fill="rgb(210,31,41)" fg:x="256" fg:w="27"/><text x="1.5815%" y="302.50"></text></g><g><title>add (openpyxl/utils/indexed_list.py:47) (21 samples, 0.11%)</title><rect x="1.3627%" y="308" width="0.1092%" height="15" fill="rgb(221,200,47)" fg:x="262" fg:w="21"/><text x="1.6127%" y="318.50"></text></g><g><title>_merge_named_styles (openpyxl/styles/stylesheet.py:106) (21 samples, 0.11%)</title><rect x="1.5188%" y="324" width="0.1092%" height="15" fill="rgb(226,26,5)" fg:x="292" fg:w="21"/><text x="1.7688%" y="334.50"></text></g><g><title>names (openpyxl/styles/named_styles.py:263) (20 samples, 0.10%)</title><rect x="1.5240%" y="340" width="0.1040%" height="15" fill="rgb(249,33,26)" fg:x="293" fg:w="20"/><text x="1.7740%" y="350.50"></text></g><g><title>_normalise_numbers (openpyxl/styles/stylesheet.py:154) (27 samples, 0.14%)</title><rect x="1.6280%" y="324" width="0.1404%" height="15" fill="rgb(235,183,28)" fg:x="313" fg:w="27"/><text x="1.8780%" y="334.50"></text></g><g><title>__eq__ (openpyxl/descriptors/serialisable.py:173) (22 samples, 0.11%)</title><rect x="1.9141%" y="372" width="0.1144%" height="15" fill="rgb(221,5,38)" fg:x="368" fg:w="22"/><text x="2.1641%" y="382.50"></text></g><g><title>add (openpyxl/utils/indexed_list.py:47) (46 samples, 0.24%)</title><rect x="1.8205%" y="340" width="0.2393%" height="15" fill="rgb(247,18,42)" fg:x="350" fg:w="46"/><text x="2.0705%" y="350.50"></text></g><g><title>append (openpyxl/utils/indexed_list.py:42) (29 samples, 0.15%)</title><rect x="1.9089%" y="356" width="0.1508%" height="15" fill="rgb(241,131,45)" fg:x="367" fg:w="29"/><text x="2.1589%" y="366.50"></text></g><g><title>__init__ (openpyxl/styles/stylesheet.py:56) (126 samples, 0.66%)</title><rect x="1.4980%" y="308" width="0.6554%" height="15" fill="rgb(249,31,29)" fg:x="288" fg:w="126"/><text x="1.7480%" y="318.50"></text></g><g><title>_to_array (openpyxl/styles/cell_style.py:188) (74 samples, 0.38%)</title><rect x="1.7684%" y="324" width="0.3849%" height="15" fill="rgb(225,111,53)" fg:x="340" fg:w="74"/><text x="2.0184%" y="334.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (28 samples, 0.15%)</title><rect x="2.2001%" y="356" width="0.1456%" height="15" fill="rgb(238,160,17)" fg:x="423" fg:w="28"/><text x="2.4501%" y="366.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (36 samples, 0.19%)</title><rect x="2.1689%" y="340" width="0.1872%" height="15" fill="rgb(214,148,48)" fg:x="417" fg:w="36"/><text x="2.4189%" y="350.50"></text></g><g><title>from_tree (openpyxl/styles/fills.py:57) (20 samples, 0.10%)</title><rect x="2.3562%" y="340" width="0.1040%" height="15" fill="rgb(232,36,49)" fg:x="453" fg:w="20"/><text x="2.6062%" y="350.50"></text></g><g><title>__set__ (openpyxl/descriptors/nested.py:28) (31 samples, 0.16%)</title><rect x="2.5902%" y="388" width="0.1612%" height="15" fill="rgb(209,103,24)" fg:x="498" fg:w="31"/><text x="2.8402%" y="398.50"></text></g><g><title>__init__ (openpyxl/styles/fonts.py:69) (36 samples, 0.19%)</title><rect x="2.5746%" y="372" width="0.1872%" height="15" fill="rgb(229,88,8)" fg:x="495" fg:w="36"/><text x="2.8246%" y="382.50"></text></g><g><title>from_tree (openpyxl/descriptors/sequence.py:84) (140 samples, 0.73%)</title><rect x="2.1533%" y="308" width="0.7282%" height="15" fill="rgb(213,181,19)" fg:x="414" fg:w="140"/><text x="2.4033%" y="318.50"></text></g><g><title>&lt;listcomp&gt; (openpyxl/descriptors/sequence.py:85) (140 samples, 0.73%)</title><rect x="2.1533%" y="324" width="0.7282%" height="15" fill="rgb(254,191,54)" fg:x="414" fg:w="140"/><text x="2.4033%" y="334.50"></text></g><g><title>from_tree (openpyxl/styles/fonts.py:101) (81 samples, 0.42%)</title><rect x="2.4602%" y="340" width="0.4213%" height="15" fill="rgb(241,83,37)" fg:x="473" fg:w="81"/><text x="2.7102%" y="350.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (79 samples, 0.41%)</title><rect x="2.4706%" y="356" width="0.4109%" height="15" fill="rgb(233,36,39)" fg:x="475" fg:w="79"/><text x="2.7206%" y="366.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:38) (31 samples, 0.16%)</title><rect x="3.3704%" y="388" width="0.1612%" height="15" fill="rgb(226,3,54)" fg:x="648" fg:w="31"/><text x="3.6204%" y="398.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:160) (65 samples, 0.34%)</title><rect x="3.1988%" y="356" width="0.3381%" height="15" fill="rgb(245,192,40)" fg:x="615" fg:w="65"/><text x="3.4488%" y="366.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:64) (52 samples, 0.27%)</title><rect x="3.2664%" y="372" width="0.2705%" height="15" fill="rgb(238,167,29)" fg:x="628" fg:w="52"/><text x="3.5164%" y="382.50"></text></g><g><title>__init__ (openpyxl/styles/cell_style.py:93) (126 samples, 0.66%)</title><rect x="3.1572%" y="340" width="0.6554%" height="15" fill="rgb(232,182,51)" fg:x="607" fg:w="126"/><text x="3.4072%" y="350.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:64) (35 samples, 0.18%)</title><rect x="3.6305%" y="356" width="0.1820%" height="15" fill="rgb(231,60,39)" fg:x="698" fg:w="35"/><text x="3.8805%" y="366.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (51 samples, 0.27%)</title><rect x="3.8334%" y="340" width="0.2653%" height="15" fill="rgb(208,69,12)" fg:x="737" fg:w="51"/><text x="4.0834%" y="350.50"></text></g><g><title>__init__ (openpyxl/styles/alignment.py:45) (47 samples, 0.24%)</title><rect x="3.8542%" y="356" width="0.2445%" height="15" fill="rgb(235,93,37)" fg:x="741" fg:w="47"/><text x="4.1042%" y="366.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (220 samples, 1.14%)</title><rect x="2.9751%" y="324" width="1.1443%" height="15" fill="rgb(213,116,39)" fg:x="572" fg:w="220"/><text x="3.2251%" y="334.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (248 samples, 1.29%)</title><rect x="2.8815%" y="308" width="1.2899%" height="15" fill="rgb(222,207,29)" fg:x="554" fg:w="248"/><text x="3.1315%" y="318.50"></text></g><g><title>from_tree (openpyxl/styles/stylesheet.py:97) (520 samples, 2.70%)</title><rect x="1.4720%" y="276" width="2.7047%" height="15" fill="rgb(206,96,30)" fg:x="283" fg:w="520"/><text x="1.7220%" y="286.50">fr..</text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (519 samples, 2.70%)</title><rect x="1.4772%" y="292" width="2.6995%" height="15" fill="rgb(218,138,4)" fg:x="284" fg:w="519"/><text x="1.7272%" y="302.50">fr..</text></g><g><title>apply_stylesheet (openpyxl/styles/stylesheet.py:188) (641 samples, 3.33%)</title><rect x="0.8686%" y="260" width="3.3340%" height="15" fill="rgb(250,191,14)" fg:x="167" fg:w="641"/><text x="1.1186%" y="270.50">app..</text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (21 samples, 0.11%)</title><rect x="4.2599%" y="276" width="0.1092%" height="15" fill="rgb(239,60,40)" fg:x="819" fg:w="21"/><text x="4.5099%" y="286.50"></text></g><g><title>read_manifest (openpyxl/reader/excel.py:133) (39 samples, 0.20%)</title><rect x="4.2130%" y="260" width="0.2029%" height="15" fill="rgb(206,27,48)" fg:x="810" fg:w="39"/><text x="4.4630%" y="270.50"></text></g><g><title>content (openpyxl/cell/text.py:173) (29 samples, 0.15%)</title><rect x="4.7436%" y="292" width="0.1508%" height="15" fill="rgb(225,35,8)" fg:x="912" fg:w="29"/><text x="4.9936%" y="302.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:38) (30 samples, 0.16%)</title><rect x="5.3885%" y="324" width="0.1560%" height="15" fill="rgb(250,213,24)" fg:x="1036" fg:w="30"/><text x="5.6385%" y="334.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:38) (37 samples, 0.19%)</title><rect x="5.7058%" y="356" width="0.1924%" height="15" fill="rgb(247,123,22)" fg:x="1097" fg:w="37"/><text x="5.9558%" y="366.50"></text></g><g><title>__set__ (openpyxl/descriptors/nested.py:28) (69 samples, 0.36%)</title><rect x="5.5446%" y="324" width="0.3589%" height="15" fill="rgb(231,138,38)" fg:x="1066" fg:w="69"/><text x="5.7946%" y="334.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:64) (53 samples, 0.28%)</title><rect x="5.6278%" y="340" width="0.2757%" height="15" fill="rgb(231,145,46)" fg:x="1082" fg:w="53"/><text x="5.8778%" y="350.50"></text></g><g><title>__init__ (openpyxl/cell/text.py:161) (188 samples, 0.98%)</title><rect x="5.2793%" y="308" width="0.9778%" height="15" fill="rgb(251,118,11)" fg:x="1015" fg:w="188"/><text x="5.5293%" y="318.50"></text></g><g><title>__set__ (openpyxl/descriptors/sequence.py:23) (68 samples, 0.35%)</title><rect x="5.9035%" y="324" width="0.3537%" height="15" fill="rgb(217,147,25)" fg:x="1135" fg:w="68"/><text x="6.1535%" y="334.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (302 samples, 1.57%)</title><rect x="4.8944%" y="292" width="1.5708%" height="15" fill="rgb(247,81,37)" fg:x="941" fg:w="302"/><text x="5.1444%" y="302.50"></text></g><g><title>localname (openpyxl/xml/functions.py:75) (38 samples, 0.20%)</title><rect x="6.2676%" y="308" width="0.1976%" height="15" fill="rgb(209,12,38)" fg:x="1205" fg:w="38"/><text x="6.5176%" y="318.50"></text></g><g><title>feed (xml/etree/ElementTree.py:1290) (108 samples, 0.56%)</title><rect x="6.4860%" y="308" width="0.5617%" height="15" fill="rgb(227,1,9)" fg:x="1247" fg:w="108"/><text x="6.7360%" y="318.50"></text></g><g><title>iterator (xml/etree/ElementTree.py:1245) (134 samples, 0.70%)</title><rect x="6.4652%" y="292" width="0.6970%" height="15" fill="rgb(248,47,43)" fg:x="1243" fg:w="134"/><text x="6.7152%" y="302.50"></text></g><g><title>read_strings (openpyxl/reader/excel.py:139) (518 samples, 2.69%)</title><rect x="4.4991%" y="260" width="2.6943%" height="15" fill="rgb(221,10,30)" fg:x="865" fg:w="518"/><text x="4.7491%" y="270.50">re..</text></g><g><title>read_string_table (openpyxl/reader/strings.py:9) (515 samples, 2.68%)</title><rect x="4.5147%" y="276" width="2.6787%" height="15" fill="rgb(210,229,1)" fg:x="868" fg:w="515"/><text x="4.7647%" y="286.50">re..</text></g><g><title>__init__ (openpyxl/worksheet/worksheet.py:96) (34 samples, 0.18%)</title><rect x="7.3338%" y="308" width="0.1768%" height="15" fill="rgb(222,148,37)" fg:x="1410" fg:w="34"/><text x="7.5838%" y="318.50"></text></g><g><title>_setup (openpyxl/worksheet/worksheet.py:100) (23 samples, 0.12%)</title><rect x="7.3910%" y="324" width="0.1196%" height="15" fill="rgb(234,67,33)" fg:x="1421" fg:w="23"/><text x="7.6410%" y="334.50"></text></g><g><title>add_named_style (openpyxl/workbook/workbook.py:340) (21 samples, 0.11%)</title><rect x="7.6095%" y="324" width="0.1092%" height="15" fill="rgb(247,98,35)" fg:x="1463" fg:w="21"/><text x="7.8595%" y="334.50"></text></g><g><title>bind (openpyxl/styles/named_styles.py:106) (20 samples, 0.10%)</title><rect x="7.6147%" y="340" width="0.1040%" height="15" fill="rgb(247,138,52)" fg:x="1464" fg:w="20"/><text x="7.8647%" y="350.50"></text></g><g><title>_recalculate (openpyxl/styles/named_styles.py:114) (20 samples, 0.10%)</title><rect x="7.6147%" y="356" width="0.1040%" height="15" fill="rgb(213,79,30)" fg:x="1464" fg:w="20"/><text x="7.8647%" y="366.50"></text></g><g><title>__init__ (openpyxl/reader/workbook.py:31) (112 samples, 0.58%)</title><rect x="7.2454%" y="276" width="0.5825%" height="15" fill="rgb(246,177,23)" fg:x="1393" fg:w="112"/><text x="7.4954%" y="286.50"></text></g><g><title>__init__ (openpyxl/workbook/workbook.py:58) (111 samples, 0.58%)</title><rect x="7.2506%" y="292" width="0.5773%" height="15" fill="rgb(230,62,27)" fg:x="1394" fg:w="111"/><text x="7.5006%" y="302.50"></text></g><g><title>_setup_styles (openpyxl/workbook/workbook.py:90) (61 samples, 0.32%)</title><rect x="7.5107%" y="308" width="0.3173%" height="15" fill="rgb(216,154,8)" fg:x="1444" fg:w="61"/><text x="7.7607%" y="318.50"></text></g><g><title>copy (copy.py:66) (21 samples, 0.11%)</title><rect x="7.7187%" y="324" width="0.1092%" height="15" fill="rgb(244,35,45)" fg:x="1484" fg:w="21"/><text x="7.9687%" y="334.50"></text></g><g><title>__copy__ (openpyxl/descriptors/serialisable.py:231) (21 samples, 0.11%)</title><rect x="7.7187%" y="340" width="0.1092%" height="15" fill="rgb(251,115,12)" fg:x="1484" fg:w="21"/><text x="7.9687%" y="350.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (25 samples, 0.13%)</title><rect x="8.0152%" y="308" width="0.1300%" height="15" fill="rgb(240,54,50)" fg:x="1541" fg:w="25"/><text x="8.2652%" y="318.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (37 samples, 0.19%)</title><rect x="7.9580%" y="292" width="0.1924%" height="15" fill="rgb(233,84,52)" fg:x="1530" fg:w="37"/><text x="8.2080%" y="302.50"></text></g><g><title>read_workbook (openpyxl/reader/excel.py:147) (188 samples, 0.98%)</title><rect x="7.2298%" y="260" width="0.9778%" height="15" fill="rgb(207,117,47)" fg:x="1390" fg:w="188"/><text x="7.4798%" y="270.50"></text></g><g><title>parse (openpyxl/reader/workbook.py:46) (71 samples, 0.37%)</title><rect x="7.8383%" y="276" width="0.3693%" height="15" fill="rgb(249,43,39)" fg:x="1507" fg:w="71"/><text x="8.0883%" y="286.50"></text></g><g><title>__init__ (openpyxl/worksheet/_reader.py:87) (20 samples, 0.10%)</title><rect x="8.4001%" y="308" width="0.1040%" height="15" fill="rgb(209,38,44)" fg:x="1615" fg:w="20"/><text x="8.6501%" y="318.50"></text></g><g><title>_get_source (openpyxl/worksheet/_read_only.py:53) (69 samples, 0.36%)</title><rect x="8.5041%" y="308" width="0.3589%" height="15" fill="rgb(236,212,23)" fg:x="1635" fg:w="69"/><text x="8.7541%" y="318.50"></text></g><g><title>open (zipfile.py:1478) (67 samples, 0.35%)</title><rect x="8.5145%" y="324" width="0.3485%" height="15" fill="rgb(242,79,21)" fg:x="1637" fg:w="67"/><text x="8.7645%" y="334.50"></text></g><g><title>read (zipfile.py:738) (40 samples, 0.21%)</title><rect x="8.6549%" y="340" width="0.2081%" height="15" fill="rgb(211,96,35)" fg:x="1664" fg:w="40"/><text x="8.9049%" y="350.50"></text></g><g><title>boundaries (openpyxl/worksheet/dimensions.py:294) (22 samples, 0.11%)</title><rect x="8.9566%" y="324" width="0.1144%" height="15" fill="rgb(253,215,40)" fg:x="1722" fg:w="22"/><text x="9.2066%" y="334.50"></text></g><g><title>range_boundaries (openpyxl/utils/cell.py:126) (22 samples, 0.11%)</title><rect x="8.9566%" y="340" width="0.1144%" height="15" fill="rgb(211,81,21)" fg:x="1722" fg:w="22"/><text x="9.2066%" y="350.50"></text></g><g><title>feed (xml/etree/ElementTree.py:1290) (2,062 samples, 10.73%)</title><rect x="9.1491%" y="340" width="10.7251%" height="15" fill="rgb(208,190,38)" fg:x="1759" fg:w="2062"/><text x="9.3991%" y="350.50">feed (xml/etree/..</text></g><g><title>_read2 (zipfile.py:1018) (47 samples, 0.24%)</title><rect x="20.4567%" y="372" width="0.2445%" height="15" fill="rgb(235,213,38)" fg:x="3933" fg:w="47"/><text x="20.7067%" y="382.50"></text></g><g><title>read (zipfile.py:738) (44 samples, 0.23%)</title><rect x="20.4723%" y="388" width="0.2289%" height="15" fill="rgb(237,122,38)" fg:x="3936" fg:w="44"/><text x="20.7223%" y="398.50"></text></g><g><title>read (zipfile.py:900) (191 samples, 0.99%)</title><rect x="19.8741%" y="340" width="0.9934%" height="15" fill="rgb(244,218,35)" fg:x="3821" fg:w="191"/><text x="20.1241%" y="350.50"></text></g><g><title>_read1 (zipfile.py:982) (188 samples, 0.98%)</title><rect x="19.8897%" y="356" width="0.9778%" height="15" fill="rgb(240,68,47)" fg:x="3824" fg:w="188"/><text x="20.1397%" y="366.50"></text></g><g><title>_update_crc (zipfile.py:935) (32 samples, 0.17%)</title><rect x="20.7011%" y="372" width="0.1664%" height="15" fill="rgb(210,16,53)" fg:x="3980" fg:w="32"/><text x="20.9511%" y="382.50"></text></g><g><title>iterator (xml/etree/ElementTree.py:1245) (2,261 samples, 11.76%)</title><rect x="9.1387%" y="324" width="11.7601%" height="15" fill="rgb(235,124,12)" fg:x="1757" fg:w="2261"/><text x="9.3887%" y="334.50">iterator (xml/etr..</text></g><g><title>__init__ (xml/etree/ElementTree.py:1278) (20 samples, 0.10%)</title><rect x="20.9976%" y="340" width="0.1040%" height="15" fill="rgb(224,169,11)" fg:x="4037" fg:w="20"/><text x="21.2476%" y="350.50"></text></g><g><title>__new__ (abc.py:105) (91 samples, 0.47%)</title><rect x="21.1016%" y="340" width="0.4733%" height="15" fill="rgb(250,166,2)" fg:x="4057" fg:w="91"/><text x="21.3516%" y="350.50"></text></g><g><title>__init__ (openpyxl/worksheet/_read_only.py:34) (2,555 samples, 13.29%)</title><rect x="8.3013%" y="276" width="13.2893%" height="15" fill="rgb(242,216,29)" fg:x="1596" fg:w="2555"/><text x="8.5513%" y="286.50">__init__ (openpyxl/w..</text></g><g><title>_get_size (openpyxl/worksheet/_read_only.py:44) (2,543 samples, 13.23%)</title><rect x="8.3637%" y="292" width="13.2269%" height="15" fill="rgb(230,116,27)" fg:x="1608" fg:w="2543"/><text x="8.6137%" y="302.50">_get_size (openpyxl/..</text></g><g><title>parse_dimensions (openpyxl/worksheet/_reader.py:160) (2,440 samples, 12.69%)</title><rect x="8.8994%" y="308" width="12.6911%" height="15" fill="rgb(228,99,48)" fg:x="1711" fg:w="2440"/><text x="9.1494%" y="318.50">parse_dimensions (o..</text></g><g><title>iterparse (xml/etree/ElementTree.py:1226) (133 samples, 0.69%)</title><rect x="20.8988%" y="324" width="0.6918%" height="15" fill="rgb(253,11,6)" fg:x="4018" fg:w="133"/><text x="21.1488%" y="334.50"></text></g><g><title>get_dependents (openpyxl/packaging/relationship.py:124) (47 samples, 0.24%)</title><rect x="21.6530%" y="308" width="0.2445%" height="15" fill="rgb(247,143,39)" fg:x="4163" fg:w="47"/><text x="21.9030%" y="318.50"></text></g><g><title>find_sheets (openpyxl/reader/workbook.py:77) (60 samples, 0.31%)</title><rect x="21.5906%" y="276" width="0.3121%" height="15" fill="rgb(236,97,10)" fg:x="4151" fg:w="60"/><text x="21.8406%" y="286.50"></text></g><g><title>rels (openpyxl/reader/workbook.py:39) (49 samples, 0.25%)</title><rect x="21.6478%" y="292" width="0.2549%" height="15" fill="rgb(233,208,19)" fg:x="4162" fg:w="49"/><text x="21.8978%" y="302.50"></text></g><g><title>get_dependents (openpyxl/packaging/relationship.py:124) (29 samples, 0.15%)</title><rect x="21.9026%" y="276" width="0.1508%" height="15" fill="rgb(216,164,2)" fg:x="4211" fg:w="29"/><text x="22.1526%" y="286.50"></text></g><g><title>__init__ (pandas/io/excel/_base.py:525) (4,133 samples, 21.50%)</title><rect x="0.6554%" y="196" width="21.4969%" height="15" fill="rgb(220,129,5)" fg:x="126" fg:w="4133"/><text x="0.9054%" y="206.50">__init__ (pandas/io/excel/_base.py..</text></g><g><title>load_workbook (pandas/io/excel/_openpyxl.py:557) (4,122 samples, 21.44%)</title><rect x="0.7126%" y="212" width="21.4397%" height="15" fill="rgb(242,17,10)" fg:x="137" fg:w="4122"/><text x="0.9626%" y="222.50">load_workbook (pandas/io/excel/_op..</text></g><g><title>load_workbook (openpyxl/reader/excel.py:288) (4,120 samples, 21.43%)</title><rect x="0.7230%" y="228" width="21.4293%" height="15" fill="rgb(242,107,0)" fg:x="139" fg:w="4120"/><text x="0.9730%" y="238.50">load_workbook (openpyxl/reader/exc..</text></g><g><title>read (openpyxl/reader/excel.py:275) (4,099 samples, 21.32%)</title><rect x="0.8322%" y="244" width="21.3201%" height="15" fill="rgb(251,28,31)" fg:x="160" fg:w="4099"/><text x="1.0822%" y="254.50">read (openpyxl/reader/excel.py:275)</text></g><g><title>read_worksheets (openpyxl/reader/excel.py:203) (2,681 samples, 13.94%)</title><rect x="8.2076%" y="260" width="13.9447%" height="15" fill="rgb(233,223,10)" fg:x="1578" fg:w="2681"/><text x="8.4576%" y="270.50">read_worksheets (open..</text></g><g><title>__init__ (pandas/io/excel/_openpyxl.py:533) (4,142 samples, 21.54%)</title><rect x="0.6502%" y="180" width="21.5437%" height="15" fill="rgb(215,21,27)" fg:x="125" fg:w="4142"/><text x="0.9002%" y="190.50">__init__ (pandas/io/excel/_openpyx..</text></g><g><title>__init__ (zipfile.py:1216) (24 samples, 0.12%)</title><rect x="22.2875%" y="196" width="0.1248%" height="15" fill="rgb(232,23,21)" fg:x="4285" fg:w="24"/><text x="22.5375%" y="206.50"></text></g><g><title>_RealGetContents (zipfile.py:1326) (23 samples, 0.12%)</title><rect x="22.2927%" y="212" width="0.1196%" height="15" fill="rgb(244,5,23)" fg:x="4286" fg:w="23"/><text x="22.5427%" y="222.50"></text></g><g><title>__init__ (pandas/io/excel/_base.py:1597) (4,197 samples, 21.83%)</title><rect x="0.6398%" y="164" width="21.8298%" height="15" fill="rgb(226,81,46)" fg:x="123" fg:w="4197"/><text x="0.8898%" y="174.50">__init__ (pandas/io/excel/_base.py..</text></g><g><title>inspect_excel_format (pandas/io/excel/_base.py:1471) (39 samples, 0.20%)</title><rect x="22.2667%" y="180" width="0.2029%" height="15" fill="rgb(247,70,30)" fg:x="4281" fg:w="39"/><text x="22.5167%" y="190.50"></text></g><g><title>&lt;listcomp&gt; (pandas/io/excel/_openpyxl.py:608) (294 samples, 1.53%)</title><rect x="22.7764%" y="212" width="1.5292%" height="15" fill="rgb(212,68,19)" fg:x="4379" fg:w="294"/><text x="23.0264%" y="222.50"></text></g><g><title>_convert_cell (pandas/io/excel/_openpyxl.py:576) (265 samples, 1.38%)</title><rect x="22.9273%" y="228" width="1.3783%" height="15" fill="rgb(240,187,13)" fg:x="4408" fg:w="265"/><text x="23.1773%" y="238.50"></text></g><g><title>value (openpyxl/cell/read_only.py:108) (20 samples, 0.10%)</title><rect x="24.2016%" y="244" width="0.1040%" height="15" fill="rgb(223,113,26)" fg:x="4653" fg:w="20"/><text x="24.4516%" y="254.50"></text></g><g><title>_get_row (openpyxl/worksheet/_read_only.py:101) (172 samples, 0.89%)</title><rect x="24.3628%" y="228" width="0.8946%" height="15" fill="rgb(206,192,2)" fg:x="4684" fg:w="172"/><text x="24.6128%" y="238.50"></text></g><g><title>__init__ (openpyxl/cell/read_only.py:14) (77 samples, 0.40%)</title><rect x="24.8570%" y="244" width="0.4005%" height="15" fill="rgb(241,108,4)" fg:x="4779" fg:w="77"/><text x="25.1070%" y="254.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (20 samples, 0.10%)</title><rect x="26.0325%" y="244" width="0.1040%" height="15" fill="rgb(247,173,49)" fg:x="5005" fg:w="20"/><text x="26.2825%" y="254.50"></text></g><g><title>feed (xml/etree/ElementTree.py:1290) (430 samples, 2.24%)</title><rect x="26.2249%" y="260" width="2.2366%" height="15" fill="rgb(224,114,35)" fg:x="5042" fg:w="430"/><text x="26.4749%" y="270.50">f..</text></g><g><title>read (zipfile.py:900) (71 samples, 0.37%)</title><rect x="28.4615%" y="260" width="0.3693%" height="15" fill="rgb(245,159,27)" fg:x="5472" fg:w="71"/><text x="28.7115%" y="270.50"></text></g><g><title>_read1 (zipfile.py:982) (65 samples, 0.34%)</title><rect x="28.4927%" y="276" width="0.3381%" height="15" fill="rgb(245,172,44)" fg:x="5478" fg:w="65"/><text x="28.7427%" y="286.50"></text></g><g><title>iterator (xml/etree/ElementTree.py:1245) (579 samples, 3.01%)</title><rect x="26.1365%" y="244" width="3.0115%" height="15" fill="rgb(236,23,11)" fg:x="5025" fg:w="579"/><text x="26.3865%" y="254.50">ite..</text></g><g><title>read_events (xml/etree/ElementTree.py:1314) (61 samples, 0.32%)</title><rect x="28.8308%" y="260" width="0.3173%" height="15" fill="rgb(205,117,38)" fg:x="5543" fg:w="61"/><text x="29.0808%" y="270.50"></text></g><g><title>_cast_number (openpyxl/worksheet/_reader.py:78) (61 samples, 0.32%)</title><rect x="30.6356%" y="292" width="0.3173%" height="15" fill="rgb(237,72,25)" fg:x="5890" fg:w="61"/><text x="30.8856%" y="302.50"></text></g><g><title>&lt;listcomp&gt; (openpyxl/worksheet/_reader.py:286) (471 samples, 2.45%)</title><rect x="29.3093%" y="260" width="2.4498%" height="15" fill="rgb(244,70,9)" fg:x="5635" fg:w="471"/><text x="29.5593%" y="270.50">&lt;l..</text></g><g><title>parse_cell (openpyxl/worksheet/_reader.py:177) (428 samples, 2.23%)</title><rect x="29.5329%" y="276" width="2.2262%" height="15" fill="rgb(217,125,39)" fg:x="5678" fg:w="428"/><text x="29.7829%" y="286.50">p..</text></g><g><title>coordinate_to_tuple (openpyxl/utils/cell.py:193) (155 samples, 0.81%)</title><rect x="30.9529%" y="292" width="0.8062%" height="15" fill="rgb(235,36,10)" fg:x="5951" fg:w="155"/><text x="31.2029%" y="302.50"></text></g><g><title>get_sheet_data (pandas/io/excel/_openpyxl.py:598) (1,763 samples, 9.17%)</title><rect x="22.6256%" y="196" width="9.1699%" height="15" fill="rgb(251,123,47)" fg:x="4350" fg:w="1763"/><text x="22.8756%" y="206.50">get_sheet_dat..</text></g><g><title>_cells_by_row (openpyxl/worksheet/_read_only.py:58) (1,440 samples, 7.49%)</title><rect x="24.3056%" y="212" width="7.4899%" height="15" fill="rgb(221,13,13)" fg:x="4673" fg:w="1440"/><text x="24.5556%" y="222.50">_cells_by_..</text></g><g><title>parse (openpyxl/worksheet/_reader.py:113) (1,256 samples, 6.53%)</title><rect x="25.2627%" y="228" width="6.5328%" height="15" fill="rgb(238,131,9)" fg:x="4857" fg:w="1256"/><text x="25.5127%" y="238.50">parse (op..</text></g><g><title>parse_row (openpyxl/worksheet/_reader.py:265) (506 samples, 2.63%)</title><rect x="29.1636%" y="244" width="2.6319%" height="15" fill="rgb(211,50,8)" fg:x="5607" fg:w="506"/><text x="29.4136%" y="254.50">pa..</text></g><g><title>__init__ (pandas/core/series.py:343) (22 samples, 0.11%)</title><rect x="31.8475%" y="292" width="0.1144%" height="15" fill="rgb(245,182,24)" fg:x="6123" fg:w="22"/><text x="32.0975%" y="302.50"></text></g><g><title>create_series_with_explicit_dtype (pandas/core/construction.py:882) (23 samples, 0.12%)</title><rect x="31.8475%" y="276" width="0.1196%" height="15" fill="rgb(242,14,37)" fg:x="6123" fg:w="23"/><text x="32.0975%" y="286.50"></text></g><g><title>_init_dict (pandas/core/series.py:487) (38 samples, 0.20%)</title><rect x="31.8475%" y="260" width="0.1976%" height="15" fill="rgb(246,228,12)" fg:x="6123" fg:w="38"/><text x="32.0975%" y="270.50"></text></g><g><title>__init__ (pandas/core/series.py:343) (61 samples, 0.32%)</title><rect x="31.8423%" y="244" width="0.3173%" height="15" fill="rgb(213,55,15)" fg:x="6122" fg:w="61"/><text x="32.0923%" y="254.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:101) (23 samples, 0.12%)</title><rect x="32.1700%" y="244" width="0.1196%" height="15" fill="rgb(209,9,3)" fg:x="6185" fg:w="23"/><text x="32.4200%" y="254.50"></text></g><g><title>__init__ (pandas/core/frame.py:608) (118 samples, 0.61%)</title><rect x="31.8059%" y="212" width="0.6138%" height="15" fill="rgb(230,59,30)" fg:x="6115" fg:w="118"/><text x="32.0559%" y="222.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:424) (116 samples, 0.60%)</title><rect x="31.8163%" y="228" width="0.6033%" height="15" fill="rgb(209,121,21)" fg:x="6117" fg:w="116"/><text x="32.0663%" y="238.50"></text></g><g><title>_infer_types (pandas/io/parsers/base_parser.py:682) (57 samples, 0.30%)</title><rect x="32.4717%" y="260" width="0.2965%" height="15" fill="rgb(220,109,13)" fg:x="6243" fg:w="57"/><text x="32.7217%" y="270.50"></text></g><g><title>_convert_data (pandas/io/parsers/python_parser.py:324) (71 samples, 0.37%)</title><rect x="32.4404%" y="228" width="0.3693%" height="15" fill="rgb(232,18,1)" fg:x="6237" fg:w="71"/><text x="32.6904%" y="238.50"></text></g><g><title>_convert_to_ndarrays (pandas/io/parsers/base_parser.py:520) (71 samples, 0.37%)</title><rect x="32.4404%" y="244" width="0.3693%" height="15" fill="rgb(215,41,42)" fg:x="6237" fg:w="71"/><text x="32.6904%" y="254.50"></text></g><g><title>read_benefit_params (all_countries_loop.py:7) (6,267 samples, 32.60%)</title><rect x="0.2757%" y="100" width="32.5965%" height="15" fill="rgb(224,123,36)" fg:x="53" fg:w="6267"/><text x="0.5257%" y="110.50">read_benefit_params (all_countries_loop.py:7)</text></g><g><title>wrapper (pandas/util/_decorators.py:170) (6,201 samples, 32.25%)</title><rect x="0.6190%" y="116" width="32.2532%" height="15" fill="rgb(240,125,3)" fg:x="119" fg:w="6201"/><text x="0.8690%" y="126.50">wrapper (pandas/util/_decorators.py:170)</text></g><g><title>wrapper (pandas/util/_decorators.py:308) (6,200 samples, 32.25%)</title><rect x="0.6242%" y="132" width="32.2480%" height="15" fill="rgb(205,98,50)" fg:x="120" fg:w="6200"/><text x="0.8742%" y="142.50">wrapper (pandas/util/_decorators.py:308)</text></g><g><title>read_excel (pandas/io/excel/_base.py:441) (6,199 samples, 32.24%)</title><rect x="0.6294%" y="148" width="32.2428%" height="15" fill="rgb(205,185,37)" fg:x="121" fg:w="6199"/><text x="0.8794%" y="158.50">read_excel (pandas/io/excel/_base.py:441)</text></g><g><title>parse (pandas/io/excel/_base.py:1677) (1,996 samples, 10.38%)</title><rect x="22.4904%" y="164" width="10.3818%" height="15" fill="rgb(238,207,15)" fg:x="4324" fg:w="1996"/><text x="22.7404%" y="174.50">parse (pandas/i..</text></g><g><title>parse (pandas/io/excel/_base.py:698) (1,996 samples, 10.38%)</title><rect x="22.4904%" y="180" width="10.3818%" height="15" fill="rgb(213,199,42)" fg:x="4324" fg:w="1996"/><text x="22.7404%" y="190.50">parse (pandas/i..</text></g><g><title>read (pandas/io/parsers/readers.py:1756) (207 samples, 1.08%)</title><rect x="31.7955%" y="196" width="1.0767%" height="15" fill="rgb(235,201,11)" fg:x="6113" fg:w="207"/><text x="32.0455%" y="206.50"></text></g><g><title>read (pandas/io/parsers/python_parser.py:245) (85 samples, 0.44%)</title><rect x="32.4300%" y="212" width="0.4421%" height="15" fill="rgb(207,46,11)" fg:x="6235" fg:w="85"/><text x="32.6800%" y="222.50"></text></g><g><title>calc_YLD (calc_benefit_types.py:65) (77 samples, 0.40%)</title><rect x="32.8774%" y="116" width="0.4005%" height="15" fill="rgb(241,35,35)" fg:x="6321" fg:w="77"/><text x="33.1274%" y="126.50"></text></g><g><title>population_structure (population_structure.py:3) (59 samples, 0.31%)</title><rect x="32.9710%" y="132" width="0.3069%" height="15" fill="rgb(243,32,47)" fg:x="6339" fg:w="59"/><text x="33.2210%" y="142.50"></text></g><g><title>calc_daly_annual (calc_benefit_types.py:46) (35 samples, 0.18%)</title><rect x="33.2779%" y="116" width="0.1820%" height="15" fill="rgb(247,202,23)" fg:x="6398" fg:w="35"/><text x="33.5279%" y="126.50"></text></g><g><title>calc_work_benefits (calc_benefit_types.py:26) (33 samples, 0.17%)</title><rect x="33.5171%" y="116" width="0.1716%" height="15" fill="rgb(219,102,11)" fg:x="6444" fg:w="33"/><text x="33.7671%" y="126.50"></text></g><g><title>total_econ_benefits (all_countries_loop.py:64) (222 samples, 1.15%)</title><rect x="32.8722%" y="100" width="1.1547%" height="15" fill="rgb(243,110,44)" fg:x="6320" fg:w="222"/><text x="33.1222%" y="110.50"></text></g><g><title>population_structure (population_structure.py:3) (65 samples, 0.34%)</title><rect x="33.6888%" y="116" width="0.3381%" height="15" fill="rgb(222,74,54)" fg:x="6477" fg:w="65"/><text x="33.9388%" y="126.50"></text></g><g><title>run_bcr_script (all_countries_loop.py:146) (6,524 samples, 33.93%)</title><rect x="0.1300%" y="84" width="33.9332%" height="15" fill="rgb(216,99,12)" fg:x="25" fg:w="6524"/><text x="0.3800%" y="94.50">run_bcr_script (all_countries_loop.py:146)</text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:424) (33 samples, 0.17%)</title><rect x="34.3233%" y="116" width="0.1716%" height="15" fill="rgb(226,22,26)" fg:x="6599" fg:w="33"/><text x="34.5733%" y="126.50"></text></g><g><title>__init__ (pandas/core/frame.py:608) (37 samples, 0.19%)</title><rect x="34.3077%" y="100" width="0.1924%" height="15" fill="rgb(217,163,10)" fg:x="6596" fg:w="37"/><text x="34.5577%" y="110.50"></text></g><g><title>_iset_item_mgr (pandas/core/frame.py:4130) (25 samples, 0.13%)</title><rect x="34.7030%" y="148" width="0.1300%" height="15" fill="rgb(213,25,53)" fg:x="6672" fg:w="25"/><text x="34.9530%" y="158.50"></text></g><g><title>_set_item (pandas/core/frame.py:4162) (61 samples, 0.32%)</title><rect x="34.5314%" y="116" width="0.3173%" height="15" fill="rgb(252,105,26)" fg:x="6639" fg:w="61"/><text x="34.7814%" y="126.50"></text></g><g><title>_set_item_mgr (pandas/core/frame.py:4137) (37 samples, 0.19%)</title><rect x="34.6562%" y="132" width="0.1924%" height="15" fill="rgb(220,39,43)" fg:x="6663" fg:w="37"/><text x="34.9062%" y="142.50"></text></g><g><title>__setitem__ (pandas/core/frame.py:3953) (65 samples, 0.34%)</title><rect x="34.5158%" y="100" width="0.3381%" height="15" fill="rgb(229,68,48)" fg:x="6636" fg:w="65"/><text x="34.7658%" y="110.50"></text></g><g><title>insert (pandas/core/indexes/base.py:6882) (26 samples, 0.14%)</title><rect x="34.9943%" y="132" width="0.1352%" height="15" fill="rgb(252,8,32)" fg:x="6728" fg:w="26"/><text x="35.2443%" y="142.50"></text></g><g><title>insert (pandas/core/frame.py:4746) (52 samples, 0.27%)</title><rect x="34.8642%" y="100" width="0.2705%" height="15" fill="rgb(223,20,43)" fg:x="6703" fg:w="52"/><text x="35.1142%" y="110.50"></text></g><g><title>insert (pandas/core/internals/managers.py:1373) (37 samples, 0.19%)</title><rect x="34.9423%" y="116" width="0.1924%" height="15" fill="rgb(229,81,49)" fg:x="6718" fg:w="37"/><text x="35.1923%" y="126.50"></text></g><g><title>_getitem_tuple_same_dim (pandas/core/indexing.py:912) (22 samples, 0.11%)</title><rect x="35.2491%" y="148" width="0.1144%" height="15" fill="rgb(236,28,36)" fg:x="6777" fg:w="22"/><text x="35.4991%" y="158.50"></text></g><g><title>_getitem_axis (pandas/core/indexing.py:1277) (22 samples, 0.11%)</title><rect x="35.2491%" y="164" width="0.1144%" height="15" fill="rgb(249,185,26)" fg:x="6777" fg:w="22"/><text x="35.4991%" y="174.50"></text></g><g><title>_getitem_tuple (pandas/core/indexing.py:1245) (26 samples, 0.14%)</title><rect x="35.2387%" y="132" width="0.1352%" height="15" fill="rgb(249,174,33)" fg:x="6775" fg:w="26"/><text x="35.4887%" y="142.50"></text></g><g><title>__getitem__ (pandas/core/indexing.py:1060) (33 samples, 0.17%)</title><rect x="35.2075%" y="116" width="0.1716%" height="15" fill="rgb(233,201,37)" fg:x="6769" fg:w="33"/><text x="35.4575%" y="126.50"></text></g><g><title>__init__ (openpyxl/reader/excel.py:122) (25 samples, 0.13%)</title><rect x="35.5820%" y="244" width="0.1300%" height="15" fill="rgb(221,78,26)" fg:x="6841" fg:w="25"/><text x="35.8320%" y="254.50"></text></g><g><title>_validate_archive (openpyxl/reader/excel.py:67) (25 samples, 0.13%)</title><rect x="35.5820%" y="260" width="0.1300%" height="15" fill="rgb(250,127,30)" fg:x="6841" fg:w="25"/><text x="35.8320%" y="270.50"></text></g><g><title>__init__ (zipfile.py:1216) (25 samples, 0.13%)</title><rect x="35.5820%" y="276" width="0.1300%" height="15" fill="rgb(230,49,44)" fg:x="6841" fg:w="25"/><text x="35.8320%" y="286.50"></text></g><g><title>_RealGetContents (zipfile.py:1326) (25 samples, 0.13%)</title><rect x="35.5820%" y="292" width="0.1300%" height="15" fill="rgb(229,67,23)" fg:x="6841" fg:w="25"/><text x="35.8320%" y="302.50"></text></g><g><title>XML (xml/etree/ElementTree.py:1329) (72 samples, 0.37%)</title><rect x="35.7797%" y="276" width="0.3745%" height="15" fill="rgb(249,83,47)" fg:x="6879" fg:w="72"/><text x="36.0297%" y="286.50"></text></g><g><title>bind (openpyxl/styles/named_styles.py:106) (37 samples, 0.19%)</title><rect x="36.2478%" y="276" width="0.1924%" height="15" fill="rgb(215,43,3)" fg:x="6969" fg:w="37"/><text x="36.4978%" y="286.50"></text></g><g><title>_recalculate (openpyxl/styles/named_styles.py:114) (37 samples, 0.19%)</title><rect x="36.2478%" y="292" width="0.1924%" height="15" fill="rgb(238,154,13)" fg:x="6969" fg:w="37"/><text x="36.4978%" y="302.50"></text></g><g><title>add (openpyxl/utils/indexed_list.py:47) (34 samples, 0.18%)</title><rect x="36.2634%" y="308" width="0.1768%" height="15" fill="rgb(219,56,2)" fg:x="6972" fg:w="34"/><text x="36.5134%" y="318.50"></text></g><g><title>_merge_named_styles (openpyxl/styles/stylesheet.py:106) (21 samples, 0.11%)</title><rect x="36.4766%" y="324" width="0.1092%" height="15" fill="rgb(233,0,4)" fg:x="7013" fg:w="21"/><text x="36.7266%" y="334.50"></text></g><g><title>add (openpyxl/utils/indexed_list.py:47) (44 samples, 0.23%)</title><rect x="36.7523%" y="340" width="0.2289%" height="15" fill="rgb(235,30,7)" fg:x="7066" fg:w="44"/><text x="37.0023%" y="350.50"></text></g><g><title>append (openpyxl/utils/indexed_list.py:42) (25 samples, 0.13%)</title><rect x="36.8511%" y="356" width="0.1300%" height="15" fill="rgb(250,79,13)" fg:x="7085" fg:w="25"/><text x="37.1011%" y="366.50"></text></g><g><title>__init__ (openpyxl/styles/stylesheet.py:56) (114 samples, 0.59%)</title><rect x="36.4714%" y="308" width="0.5929%" height="15" fill="rgb(211,146,34)" fg:x="7012" fg:w="114"/><text x="36.7214%" y="318.50"></text></g><g><title>_to_array (openpyxl/styles/cell_style.py:188) (75 samples, 0.39%)</title><rect x="36.6743%" y="324" width="0.3901%" height="15" fill="rgb(228,22,38)" fg:x="7051" fg:w="75"/><text x="36.9243%" y="334.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (28 samples, 0.15%)</title><rect x="37.0748%" y="340" width="0.1456%" height="15" fill="rgb(235,168,5)" fg:x="7128" fg:w="28"/><text x="37.3248%" y="350.50"></text></g><g><title>__set__ (openpyxl/descriptors/nested.py:28) (32 samples, 0.17%)</title><rect x="37.3869%" y="388" width="0.1664%" height="15" fill="rgb(221,155,16)" fg:x="7188" fg:w="32"/><text x="37.6369%" y="398.50"></text></g><g><title>__init__ (openpyxl/styles/fonts.py:69) (35 samples, 0.18%)</title><rect x="37.3765%" y="372" width="0.1820%" height="15" fill="rgb(215,215,53)" fg:x="7186" fg:w="35"/><text x="37.6265%" y="382.50"></text></g><g><title>from_tree (openpyxl/descriptors/sequence.py:84) (109 samples, 0.57%)</title><rect x="37.0644%" y="308" width="0.5669%" height="15" fill="rgb(223,4,10)" fg:x="7126" fg:w="109"/><text x="37.3144%" y="318.50"></text></g><g><title>&lt;listcomp&gt; (openpyxl/descriptors/sequence.py:85) (108 samples, 0.56%)</title><rect x="37.0696%" y="324" width="0.5617%" height="15" fill="rgb(234,103,6)" fg:x="7127" fg:w="108"/><text x="37.3196%" y="334.50"></text></g><g><title>from_tree (openpyxl/styles/fonts.py:101) (63 samples, 0.33%)</title><rect x="37.3037%" y="340" width="0.3277%" height="15" fill="rgb(227,97,0)" fg:x="7172" fg:w="63"/><text x="37.5537%" y="350.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (60 samples, 0.31%)</title><rect x="37.3193%" y="356" width="0.3121%" height="15" fill="rgb(234,150,53)" fg:x="7175" fg:w="60"/><text x="37.5693%" y="366.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:38) (27 samples, 0.14%)</title><rect x="38.0994%" y="388" width="0.1404%" height="15" fill="rgb(228,201,54)" fg:x="7325" fg:w="27"/><text x="38.3494%" y="398.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:160) (62 samples, 0.32%)</title><rect x="37.9330%" y="356" width="0.3225%" height="15" fill="rgb(222,22,37)" fg:x="7293" fg:w="62"/><text x="38.1830%" y="366.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:64) (50 samples, 0.26%)</title><rect x="37.9954%" y="372" width="0.2601%" height="15" fill="rgb(237,53,32)" fg:x="7305" fg:w="50"/><text x="38.2454%" y="382.50"></text></g><g><title>__init__ (openpyxl/styles/cell_style.py:93) (115 samples, 0.60%)</title><rect x="37.8966%" y="340" width="0.5981%" height="15" fill="rgb(233,25,53)" fg:x="7286" fg:w="115"/><text x="38.1466%" y="350.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:64) (37 samples, 0.19%)</title><rect x="38.3023%" y="356" width="0.1924%" height="15" fill="rgb(210,40,34)" fg:x="7364" fg:w="37"/><text x="38.5523%" y="366.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (182 samples, 0.95%)</title><rect x="37.7198%" y="324" width="0.9466%" height="15" fill="rgb(241,220,44)" fg:x="7252" fg:w="182"/><text x="37.9698%" y="334.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (31 samples, 0.16%)</title><rect x="38.5051%" y="340" width="0.1612%" height="15" fill="rgb(235,28,35)" fg:x="7403" fg:w="31"/><text x="38.7551%" y="350.50"></text></g><g><title>__init__ (openpyxl/styles/alignment.py:45) (29 samples, 0.15%)</title><rect x="38.5156%" y="356" width="0.1508%" height="15" fill="rgb(210,56,17)" fg:x="7405" fg:w="29"/><text x="38.7656%" y="366.50"></text></g><g><title>from_tree (openpyxl/styles/stylesheet.py:97) (438 samples, 2.28%)</title><rect x="36.4402%" y="276" width="2.2782%" height="15" fill="rgb(224,130,29)" fg:x="7006" fg:w="438"/><text x="36.6902%" y="286.50">f..</text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (437 samples, 2.27%)</title><rect x="36.4454%" y="292" width="2.2730%" height="15" fill="rgb(235,212,8)" fg:x="7007" fg:w="437"/><text x="36.6954%" y="302.50">f..</text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (209 samples, 1.09%)</title><rect x="37.6313%" y="308" width="1.0871%" height="15" fill="rgb(223,33,50)" fg:x="7235" fg:w="209"/><text x="37.8813%" y="318.50"></text></g><g><title>apply_stylesheet (openpyxl/styles/stylesheet.py:188) (573 samples, 2.98%)</title><rect x="35.7745%" y="260" width="2.9803%" height="15" fill="rgb(219,149,13)" fg:x="6878" fg:w="573"/><text x="36.0245%" y="270.50">app..</text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (24 samples, 0.12%)</title><rect x="38.8328%" y="276" width="0.1248%" height="15" fill="rgb(250,156,29)" fg:x="7466" fg:w="24"/><text x="39.0828%" y="286.50"></text></g><g><title>read_manifest (openpyxl/reader/excel.py:133) (42 samples, 0.22%)</title><rect x="38.7652%" y="260" width="0.2185%" height="15" fill="rgb(216,193,19)" fg:x="7453" fg:w="42"/><text x="39.0152%" y="270.50"></text></g><g><title>content (openpyxl/cell/text.py:173) (41 samples, 0.21%)</title><rect x="39.2957%" y="292" width="0.2133%" height="15" fill="rgb(216,135,14)" fg:x="7555" fg:w="41"/><text x="39.5457%" y="302.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:38) (34 samples, 0.18%)</title><rect x="39.9407%" y="324" width="0.1768%" height="15" fill="rgb(241,47,5)" fg:x="7679" fg:w="34"/><text x="40.1907%" y="334.50"></text></g><g><title>__set__ (openpyxl/descriptors/nested.py:28) (53 samples, 0.28%)</title><rect x="40.1175%" y="324" width="0.2757%" height="15" fill="rgb(233,42,35)" fg:x="7713" fg:w="53"/><text x="40.3675%" y="334.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:64) (36 samples, 0.19%)</title><rect x="40.2060%" y="340" width="0.1872%" height="15" fill="rgb(231,13,6)" fg:x="7730" fg:w="36"/><text x="40.4560%" y="350.50"></text></g><g><title>__set__ (openpyxl/descriptors/base.py:38) (20 samples, 0.10%)</title><rect x="40.2892%" y="356" width="0.1040%" height="15" fill="rgb(207,181,40)" fg:x="7746" fg:w="20"/><text x="40.5392%" y="366.50"></text></g><g><title>__init__ (openpyxl/cell/text.py:161) (173 samples, 0.90%)</title><rect x="39.8367%" y="308" width="0.8998%" height="15" fill="rgb(254,173,49)" fg:x="7659" fg:w="173"/><text x="40.0867%" y="318.50"></text></g><g><title>__set__ (openpyxl/descriptors/sequence.py:23) (66 samples, 0.34%)</title><rect x="40.3932%" y="324" width="0.3433%" height="15" fill="rgb(221,1,38)" fg:x="7766" fg:w="66"/><text x="40.6432%" y="334.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (268 samples, 1.39%)</title><rect x="39.5090%" y="292" width="1.3939%" height="15" fill="rgb(206,124,46)" fg:x="7596" fg:w="268"/><text x="39.7590%" y="302.50"></text></g><g><title>localname (openpyxl/xml/functions.py:75) (28 samples, 0.15%)</title><rect x="40.7573%" y="308" width="0.1456%" height="15" fill="rgb(249,21,11)" fg:x="7836" fg:w="28"/><text x="41.0073%" y="318.50"></text></g><g><title>feed (xml/etree/ElementTree.py:1290) (92 samples, 0.48%)</title><rect x="40.9185%" y="308" width="0.4785%" height="15" fill="rgb(222,201,40)" fg:x="7867" fg:w="92"/><text x="41.1685%" y="318.50"></text></g><g><title>iterator (xml/etree/ElementTree.py:1245) (107 samples, 0.56%)</title><rect x="40.9029%" y="292" width="0.5565%" height="15" fill="rgb(235,61,29)" fg:x="7864" fg:w="107"/><text x="41.1529%" y="302.50"></text></g><g><title>read_strings (openpyxl/reader/excel.py:139) (468 samples, 2.43%)</title><rect x="39.0461%" y="260" width="2.4342%" height="15" fill="rgb(219,207,3)" fg:x="7507" fg:w="468"/><text x="39.2961%" y="270.50">re..</text></g><g><title>read_string_table (openpyxl/reader/strings.py:9) (461 samples, 2.40%)</title><rect x="39.0825%" y="276" width="2.3978%" height="15" fill="rgb(222,56,46)" fg:x="7514" fg:w="461"/><text x="39.3325%" y="286.50">re..</text></g><g><title>__init__ (openpyxl/worksheet/worksheet.py:96) (28 samples, 0.15%)</title><rect x="41.5739%" y="308" width="0.1456%" height="15" fill="rgb(239,76,54)" fg:x="7993" fg:w="28"/><text x="41.8239%" y="318.50"></text></g><g><title>__init__ (openpyxl/reader/workbook.py:31) (92 samples, 0.48%)</title><rect x="41.5427%" y="276" width="0.4785%" height="15" fill="rgb(231,124,27)" fg:x="7987" fg:w="92"/><text x="41.7927%" y="286.50"></text></g><g><title>__init__ (openpyxl/workbook/workbook.py:58) (92 samples, 0.48%)</title><rect x="41.5427%" y="292" width="0.4785%" height="15" fill="rgb(249,195,6)" fg:x="7987" fg:w="92"/><text x="41.7927%" y="302.50"></text></g><g><title>_setup_styles (openpyxl/workbook/workbook.py:90) (58 samples, 0.30%)</title><rect x="41.7195%" y="308" width="0.3017%" height="15" fill="rgb(237,174,47)" fg:x="8021" fg:w="58"/><text x="41.9695%" y="318.50"></text></g><g><title>copy (copy.py:66) (21 samples, 0.11%)</title><rect x="41.9120%" y="324" width="0.1092%" height="15" fill="rgb(206,201,31)" fg:x="8058" fg:w="21"/><text x="42.1620%" y="334.50"></text></g><g><title>__copy__ (openpyxl/descriptors/serialisable.py:231) (20 samples, 0.10%)</title><rect x="41.9172%" y="340" width="0.1040%" height="15" fill="rgb(231,57,52)" fg:x="8059" fg:w="20"/><text x="42.1672%" y="350.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (33 samples, 0.17%)</title><rect x="42.1148%" y="292" width="0.1716%" height="15" fill="rgb(248,177,22)" fg:x="8097" fg:w="33"/><text x="42.3648%" y="302.50"></text></g><g><title>read_workbook (openpyxl/reader/excel.py:147) (160 samples, 0.83%)</title><rect x="41.5219%" y="260" width="0.8322%" height="15" fill="rgb(215,211,37)" fg:x="7983" fg:w="160"/><text x="41.7719%" y="270.50"></text></g><g><title>parse (openpyxl/reader/workbook.py:46) (63 samples, 0.33%)</title><rect x="42.0264%" y="276" width="0.3277%" height="15" fill="rgb(241,128,51)" fg:x="8080" fg:w="63"/><text x="42.2764%" y="286.50"></text></g><g><title>__init__ (openpyxl/worksheet/_reader.py:87) (25 samples, 0.13%)</title><rect x="42.5570%" y="308" width="0.1300%" height="15" fill="rgb(227,165,31)" fg:x="8182" fg:w="25"/><text x="42.8070%" y="318.50"></text></g><g><title>_get_source (openpyxl/worksheet/_read_only.py:53) (65 samples, 0.34%)</title><rect x="42.6870%" y="308" width="0.3381%" height="15" fill="rgb(228,167,24)" fg:x="8207" fg:w="65"/><text x="42.9370%" y="318.50"></text></g><g><title>open (zipfile.py:1478) (65 samples, 0.34%)</title><rect x="42.6870%" y="324" width="0.3381%" height="15" fill="rgb(228,143,12)" fg:x="8207" fg:w="65"/><text x="42.9370%" y="334.50"></text></g><g><title>read (zipfile.py:738) (39 samples, 0.20%)</title><rect x="42.8222%" y="340" width="0.2029%" height="15" fill="rgb(249,149,8)" fg:x="8233" fg:w="39"/><text x="43.0722%" y="350.50"></text></g><g><title>boundaries (openpyxl/worksheet/dimensions.py:294) (25 samples, 0.13%)</title><rect x="43.1187%" y="324" width="0.1300%" height="15" fill="rgb(243,35,44)" fg:x="8290" fg:w="25"/><text x="43.3687%" y="334.50"></text></g><g><title>range_boundaries (openpyxl/utils/cell.py:126) (25 samples, 0.13%)</title><rect x="43.1187%" y="340" width="0.1300%" height="15" fill="rgb(246,89,9)" fg:x="8290" fg:w="25"/><text x="43.3687%" y="350.50"></text></g><g><title>feed (xml/etree/ElementTree.py:1290) (1,969 samples, 10.24%)</title><rect x="43.3736%" y="340" width="10.2413%" height="15" fill="rgb(233,213,13)" fg:x="8339" fg:w="1969"/><text x="43.6236%" y="350.50">feed (xml/etree..</text></g><g><title>_read2 (zipfile.py:1018) (32 samples, 0.17%)</title><rect x="54.1194%" y="372" width="0.1664%" height="15" fill="rgb(233,141,41)" fg:x="10405" fg:w="32"/><text x="54.3694%" y="382.50"></text></g><g><title>read (zipfile.py:738) (28 samples, 0.15%)</title><rect x="54.1402%" y="388" width="0.1456%" height="15" fill="rgb(239,167,4)" fg:x="10409" fg:w="28"/><text x="54.3902%" y="398.50"></text></g><g><title>read (zipfile.py:900) (155 samples, 0.81%)</title><rect x="53.6149%" y="340" width="0.8062%" height="15" fill="rgb(209,217,16)" fg:x="10308" fg:w="155"/><text x="53.8649%" y="350.50"></text></g><g><title>_read1 (zipfile.py:982) (153 samples, 0.80%)</title><rect x="53.6253%" y="356" width="0.7958%" height="15" fill="rgb(219,88,35)" fg:x="10310" fg:w="153"/><text x="53.8753%" y="366.50"></text></g><g><title>_update_crc (zipfile.py:935) (26 samples, 0.14%)</title><rect x="54.2859%" y="372" width="0.1352%" height="15" fill="rgb(220,193,23)" fg:x="10437" fg:w="26"/><text x="54.5359%" y="382.50"></text></g><g><title>iterator (xml/etree/ElementTree.py:1245) (2,133 samples, 11.09%)</title><rect x="43.3423%" y="324" width="11.0944%" height="15" fill="rgb(230,90,52)" fg:x="8333" fg:w="2133"/><text x="43.5923%" y="334.50">iterator (xml/et..</text></g><g><title>__init__ (xml/etree/ElementTree.py:1278) (30 samples, 0.16%)</title><rect x="54.5147%" y="340" width="0.1560%" height="15" fill="rgb(252,106,19)" fg:x="10481" fg:w="30"/><text x="54.7647%" y="350.50"></text></g><g><title>__new__ (abc.py:105) (56 samples, 0.29%)</title><rect x="54.6708%" y="340" width="0.2913%" height="15" fill="rgb(206,74,20)" fg:x="10511" fg:w="56"/><text x="54.9208%" y="350.50"></text></g><g><title>__init__ (openpyxl/worksheet/_read_only.py:34) (2,394 samples, 12.45%)</title><rect x="42.5153%" y="276" width="12.4519%" height="15" fill="rgb(230,138,44)" fg:x="8174" fg:w="2394"/><text x="42.7653%" y="286.50">__init__ (openpyxl/..</text></g><g><title>_get_size (openpyxl/worksheet/_read_only.py:44) (2,390 samples, 12.43%)</title><rect x="42.5361%" y="292" width="12.4311%" height="15" fill="rgb(235,182,43)" fg:x="8178" fg:w="2390"/><text x="42.7861%" y="302.50">_get_size (openpyxl..</text></g><g><title>parse_dimensions (openpyxl/worksheet/_reader.py:160) (2,290 samples, 11.91%)</title><rect x="43.0563%" y="308" width="11.9110%" height="15" fill="rgb(242,16,51)" fg:x="8278" fg:w="2290"/><text x="43.3063%" y="318.50">parse_dimensions (..</text></g><g><title>iterparse (xml/etree/ElementTree.py:1226) (102 samples, 0.53%)</title><rect x="54.4367%" y="324" width="0.5305%" height="15" fill="rgb(248,9,4)" fg:x="10466" fg:w="102"/><text x="54.6867%" y="334.50"></text></g><g><title>get_dependents (openpyxl/packaging/relationship.py:124) (45 samples, 0.23%)</title><rect x="55.0244%" y="308" width="0.2341%" height="15" fill="rgb(210,31,22)" fg:x="10579" fg:w="45"/><text x="55.2744%" y="318.50"></text></g><g><title>find_sheets (openpyxl/reader/workbook.py:77) (58 samples, 0.30%)</title><rect x="54.9672%" y="276" width="0.3017%" height="15" fill="rgb(239,54,39)" fg:x="10568" fg:w="58"/><text x="55.2172%" y="286.50"></text></g><g><title>rels (openpyxl/reader/workbook.py:39) (48 samples, 0.25%)</title><rect x="55.0192%" y="292" width="0.2497%" height="15" fill="rgb(230,99,41)" fg:x="10578" fg:w="48"/><text x="55.2692%" y="302.50"></text></g><g><title>get_dependents (openpyxl/packaging/relationship.py:124) (25 samples, 0.13%)</title><rect x="55.2689%" y="276" width="0.1300%" height="15" fill="rgb(253,106,12)" fg:x="10626" fg:w="25"/><text x="55.5189%" y="286.50"></text></g><g><title>__init__ (pandas/io/excel/_base.py:525) (3,837 samples, 19.96%)</title><rect x="35.5092%" y="196" width="19.9573%" height="15" fill="rgb(213,46,41)" fg:x="6827" fg:w="3837"/><text x="35.7592%" y="206.50">__init__ (pandas/io/excel/_base..</text></g><g><title>load_workbook (pandas/io/excel/_openpyxl.py:557) (3,825 samples, 19.89%)</title><rect x="35.5716%" y="212" width="19.8949%" height="15" fill="rgb(215,133,35)" fg:x="6839" fg:w="3825"/><text x="35.8216%" y="222.50">load_workbook (pandas/io/excel/..</text></g><g><title>load_workbook (openpyxl/reader/excel.py:288) (3,823 samples, 19.88%)</title><rect x="35.5820%" y="228" width="19.8845%" height="15" fill="rgb(213,28,5)" fg:x="6841" fg:w="3823"/><text x="35.8320%" y="238.50">load_workbook (openpyxl/reader/..</text></g><g><title>read (openpyxl/reader/excel.py:275) (3,798 samples, 19.75%)</title><rect x="35.7121%" y="244" width="19.7545%" height="15" fill="rgb(215,77,49)" fg:x="6866" fg:w="3798"/><text x="35.9621%" y="254.50">read (openpyxl/reader/excel.py:..</text></g><g><title>read_worksheets (openpyxl/reader/excel.py:203) (2,521 samples, 13.11%)</title><rect x="42.3541%" y="260" width="13.1125%" height="15" fill="rgb(248,100,22)" fg:x="8143" fg:w="2521"/><text x="42.6041%" y="270.50">read_worksheets (ope..</text></g><g><title>__init__ (pandas/io/excel/_openpyxl.py:533) (3,844 samples, 19.99%)</title><rect x="35.5092%" y="180" width="19.9938%" height="15" fill="rgb(208,67,9)" fg:x="6827" fg:w="3844"/><text x="35.7592%" y="190.50">__init__ (pandas/io/excel/_open..</text></g><g><title>__init__ (zipfile.py:1216) (41 samples, 0.21%)</title><rect x="55.5602%" y="196" width="0.2133%" height="15" fill="rgb(219,133,21)" fg:x="10682" fg:w="41"/><text x="55.8102%" y="206.50"></text></g><g><title>_RealGetContents (zipfile.py:1326) (39 samples, 0.20%)</title><rect x="55.5706%" y="212" width="0.2029%" height="15" fill="rgb(246,46,29)" fg:x="10684" fg:w="39"/><text x="55.8206%" y="222.50"></text></g><g><title>__init__ (pandas/io/excel/_base.py:1597) (3,903 samples, 20.30%)</title><rect x="35.4936%" y="164" width="20.3006%" height="15" fill="rgb(246,185,52)" fg:x="6824" fg:w="3903"/><text x="35.7436%" y="174.50">__init__ (pandas/io/excel/_base...</text></g><g><title>inspect_excel_format (pandas/io/excel/_base.py:1471) (46 samples, 0.24%)</title><rect x="55.5550%" y="180" width="0.2393%" height="15" fill="rgb(252,136,11)" fg:x="10681" fg:w="46"/><text x="55.8050%" y="190.50"></text></g><g><title>&lt;listcomp&gt; (pandas/io/excel/_openpyxl.py:608) (254 samples, 1.32%)</title><rect x="56.0595%" y="212" width="1.3211%" height="15" fill="rgb(219,138,53)" fg:x="10778" fg:w="254"/><text x="56.3095%" y="222.50"></text></g><g><title>_convert_cell (pandas/io/excel/_openpyxl.py:576) (228 samples, 1.19%)</title><rect x="56.1947%" y="228" width="1.1859%" height="15" fill="rgb(211,51,23)" fg:x="10804" fg:w="228"/><text x="56.4447%" y="238.50"></text></g><g><title>_get_row (openpyxl/worksheet/_read_only.py:101) (189 samples, 0.98%)</title><rect x="57.4534%" y="228" width="0.9830%" height="15" fill="rgb(247,221,28)" fg:x="11046" fg:w="189"/><text x="57.7034%" y="238.50"></text></g><g><title>__init__ (openpyxl/cell/read_only.py:14) (74 samples, 0.38%)</title><rect x="58.0516%" y="244" width="0.3849%" height="15" fill="rgb(251,222,45)" fg:x="11161" fg:w="74"/><text x="58.3016%" y="254.50"></text></g><g><title>from_tree (openpyxl/descriptors/serialisable.py:46) (24 samples, 0.12%)</title><rect x="59.0815%" y="244" width="0.1248%" height="15" fill="rgb(217,162,53)" fg:x="11359" fg:w="24"/><text x="59.3315%" y="254.50"></text></g><g><title>feed (xml/etree/ElementTree.py:1290) (461 samples, 2.40%)</title><rect x="59.3259%" y="260" width="2.3978%" height="15" fill="rgb(229,93,14)" fg:x="11406" fg:w="461"/><text x="59.5759%" y="270.50">fe..</text></g><g><title>read (zipfile.py:900) (64 samples, 0.33%)</title><rect x="61.7237%" y="260" width="0.3329%" height="15" fill="rgb(209,67,49)" fg:x="11867" fg:w="64"/><text x="61.9737%" y="270.50"></text></g><g><title>_read1 (zipfile.py:982) (60 samples, 0.31%)</title><rect x="61.7445%" y="276" width="0.3121%" height="15" fill="rgb(213,87,29)" fg:x="11871" fg:w="60"/><text x="61.9945%" y="286.50"></text></g><g><title>iterator (xml/etree/ElementTree.py:1245) (596 samples, 3.10%)</title><rect x="59.2115%" y="244" width="3.1000%" height="15" fill="rgb(205,151,52)" fg:x="11384" fg:w="596"/><text x="59.4615%" y="254.50">ite..</text></g><g><title>read_events (xml/etree/ElementTree.py:1314) (49 samples, 0.25%)</title><rect x="62.0566%" y="260" width="0.2549%" height="15" fill="rgb(253,215,39)" fg:x="11931" fg:w="49"/><text x="62.3066%" y="270.50"></text></g><g><title>_cast_number (openpyxl/worksheet/_reader.py:78) (53 samples, 0.28%)</title><rect x="63.8926%" y="292" width="0.2757%" height="15" fill="rgb(221,220,41)" fg:x="12284" fg:w="53"/><text x="64.1426%" y="302.50"></text></g><g><title>&lt;listcomp&gt; (openpyxl/worksheet/_reader.py:286) (481 samples, 2.50%)</title><rect x="62.4415%" y="260" width="2.5018%" height="15" fill="rgb(218,133,21)" fg:x="12005" fg:w="481"/><text x="62.6915%" y="270.50">&lt;l..</text></g><g><title>parse_cell (openpyxl/worksheet/_reader.py:177) (424 samples, 2.21%)</title><rect x="62.7380%" y="276" width="2.2053%" height="15" fill="rgb(221,193,43)" fg:x="12062" fg:w="424"/><text x="62.9880%" y="286.50">p..</text></g><g><title>coordinate_to_tuple (openpyxl/utils/cell.py:193) (149 samples, 0.77%)</title><rect x="64.1683%" y="292" width="0.7750%" height="15" fill="rgb(240,128,52)" fg:x="12337" fg:w="149"/><text x="64.4183%" y="302.50"></text></g><g><title>_cells_by_row (openpyxl/worksheet/_read_only.py:58) (1,461 samples, 7.60%)</title><rect x="57.3858%" y="212" width="7.5991%" height="15" fill="rgb(253,114,12)" fg:x="11033" fg:w="1461"/><text x="57.6358%" y="222.50">_cells_by_..</text></g><g><title>parse (openpyxl/worksheet/_reader.py:113) (1,256 samples, 6.53%)</title><rect x="58.4521%" y="228" width="6.5328%" height="15" fill="rgb(215,223,47)" fg:x="11238" fg:w="1256"/><text x="58.7021%" y="238.50">parse (op..</text></g><g><title>parse_row (openpyxl/worksheet/_reader.py:265) (510 samples, 2.65%)</title><rect x="62.3323%" y="244" width="2.6527%" height="15" fill="rgb(248,225,23)" fg:x="11984" fg:w="510"/><text x="62.5823%" y="254.50">pa..</text></g><g><title>get_sheet_data (pandas/io/excel/_openpyxl.py:598) (1,738 samples, 9.04%)</title><rect x="55.9503%" y="196" width="9.0398%" height="15" fill="rgb(250,108,0)" fg:x="10757" fg:w="1738"/><text x="56.2003%" y="206.50">get_sheet_dat..</text></g><g><title>create_series_with_explicit_dtype (pandas/core/construction.py:882) (21 samples, 0.11%)</title><rect x="65.0473%" y="276" width="0.1092%" height="15" fill="rgb(228,208,7)" fg:x="12506" fg:w="21"/><text x="65.2973%" y="286.50"></text></g><g><title>__init__ (pandas/core/series.py:343) (21 samples, 0.11%)</title><rect x="65.0473%" y="292" width="0.1092%" height="15" fill="rgb(244,45,10)" fg:x="12506" fg:w="21"/><text x="65.2973%" y="302.50"></text></g><g><title>_init_dict (pandas/core/series.py:487) (42 samples, 0.22%)</title><rect x="65.0369%" y="260" width="0.2185%" height="15" fill="rgb(207,125,25)" fg:x="12504" fg:w="42"/><text x="65.2869%" y="270.50"></text></g><g><title>ensure_index (pandas/core/indexes/base.py:7315) (20 samples, 0.10%)</title><rect x="65.2554%" y="260" width="0.1040%" height="15" fill="rgb(210,195,18)" fg:x="12546" fg:w="20"/><text x="65.5054%" y="270.50"></text></g><g><title>__init__ (pandas/core/series.py:343) (67 samples, 0.35%)</title><rect x="65.0161%" y="244" width="0.3485%" height="15" fill="rgb(249,80,12)" fg:x="12500" fg:w="67"/><text x="65.2661%" y="254.50"></text></g><g><title>arrays_to_mgr (pandas/core/internals/construction.py:101) (24 samples, 0.12%)</title><rect x="65.3750%" y="244" width="0.1248%" height="15" fill="rgb(221,65,9)" fg:x="12569" fg:w="24"/><text x="65.6250%" y="254.50"></text></g><g><title>__init__ (pandas/core/frame.py:608) (125 samples, 0.65%)</title><rect x="65.0005%" y="212" width="0.6502%" height="15" fill="rgb(235,49,36)" fg:x="12497" fg:w="125"/><text x="65.2505%" y="222.50"></text></g><g><title>dict_to_mgr (pandas/core/internals/construction.py:424) (122 samples, 0.63%)</title><rect x="65.0161%" y="228" width="0.6346%" height="15" fill="rgb(225,32,20)" fg:x="12500" fg:w="122"/><text x="65.2661%" y="238.50"></text></g><g><title>_infer_types (pandas/io/parsers/base_parser.py:682) (64 samples, 0.33%)</title><rect x="65.6715%" y="260" width="0.3329%" height="15" fill="rgb(215,141,46)" fg:x="12626" fg:w="64"/><text x="65.9215%" y="270.50"></text></g><g><title>_convert_data (pandas/io/parsers/python_parser.py:324) (71 samples, 0.37%)</title><rect x="65.6611%" y="228" width="0.3693%" height="15" fill="rgb(250,160,47)" fg:x="12624" fg:w="71"/><text x="65.9111%" y="238.50"></text></g><g><title>_convert_to_ndarrays (pandas/io/parsers/base_parser.py:520) (71 samples, 0.37%)</title><rect x="65.6611%" y="244" width="0.3693%" height="15" fill="rgb(216,222,40)" fg:x="12624" fg:w="71"/><text x="65.9111%" y="254.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:170) (5,884 samples, 30.60%)</title><rect x="35.4884%" y="116" width="30.6044%" height="15" fill="rgb(234,217,39)" fg:x="6823" fg:w="5884"/><text x="35.7384%" y="126.50">wrapper (pandas/util/_decorators.py:170)</text></g><g><title>wrapper (pandas/util/_decorators.py:308) (5,884 samples, 30.60%)</title><rect x="35.4884%" y="132" width="30.6044%" height="15" fill="rgb(207,178,40)" fg:x="6823" fg:w="5884"/><text x="35.7384%" y="142.50">wrapper (pandas/util/_decorators.py:308)</text></g><g><title>read_excel (pandas/io/excel/_base.py:441) (5,883 samples, 30.60%)</title><rect x="35.4936%" y="148" width="30.5992%" height="15" fill="rgb(221,136,13)" fg:x="6824" fg:w="5883"/><text x="35.7436%" y="158.50">read_excel (pandas/io/excel/_base.py:441)</text></g><g><title>parse (pandas/io/excel/_base.py:1677) (1,974 samples, 10.27%)</title><rect x="55.8254%" y="164" width="10.2673%" height="15" fill="rgb(249,199,10)" fg:x="10733" fg:w="1974"/><text x="56.0754%" y="174.50">parse (pandas/i..</text></g><g><title>parse (pandas/io/excel/_base.py:698) (1,973 samples, 10.26%)</title><rect x="55.8306%" y="180" width="10.2621%" height="15" fill="rgb(249,222,13)" fg:x="10734" fg:w="1973"/><text x="56.0806%" y="190.50">parse (pandas/i..</text></g><g><title>read (pandas/io/parsers/readers.py:1756) (212 samples, 1.10%)</title><rect x="64.9901%" y="196" width="1.1027%" height="15" fill="rgb(244,185,38)" fg:x="12495" fg:w="212"/><text x="65.2401%" y="206.50"></text></g><g><title>read (pandas/io/parsers/python_parser.py:245) (83 samples, 0.43%)</title><rect x="65.6611%" y="212" width="0.4317%" height="15" fill="rgb(236,202,9)" fg:x="12624" fg:w="83"/><text x="65.9111%" y="222.50"></text></g><g><title>read_benefit_params (all_countries_loop.py:7) (5,955 samples, 30.97%)</title><rect x="35.1503%" y="100" width="30.9737%" height="15" fill="rgb(250,229,37)" fg:x="6758" fg:w="5955"/><text x="35.4003%" y="110.50">read_benefit_params (all_countries_loop.py:7)</text></g><g><title>_create_package (xlsxwriter/packager.py:132) (25 samples, 0.13%)</title><rect x="66.1240%" y="164" width="0.1300%" height="15" fill="rgb(206,174,23)" fg:x="12713" fg:w="25"/><text x="66.3740%" y="174.50"></text></g><g><title>_write_worksheet_files (xlsxwriter/packager.py:180) (23 samples, 0.12%)</title><rect x="66.1344%" y="180" width="0.1196%" height="15" fill="rgb(211,33,43)" fg:x="12715" fg:w="23"/><text x="66.3844%" y="190.50"></text></g><g><title>_assemble_xml_file (xlsxwriter/worksheet.py:4199) (23 samples, 0.12%)</title><rect x="66.1344%" y="196" width="0.1196%" height="15" fill="rgb(245,58,50)" fg:x="12715" fg:w="23"/><text x="66.3844%" y="206.50"></text></g><g><title>_write_sheet_data (xlsxwriter/worksheet.py:5866) (23 samples, 0.12%)</title><rect x="66.1344%" y="212" width="0.1196%" height="15" fill="rgb(244,68,36)" fg:x="12715" fg:w="23"/><text x="66.3844%" y="222.50"></text></g><g><title>_write_rows (xlsxwriter/worksheet.py:6044) (23 samples, 0.12%)</title><rect x="66.1344%" y="228" width="0.1196%" height="15" fill="rgb(232,229,15)" fg:x="12715" fg:w="23"/><text x="66.3844%" y="238.50"></text></g><g><title>save (pandas/io/excel/_base.py:1257) (34 samples, 0.18%)</title><rect x="66.1240%" y="100" width="0.1768%" height="15" fill="rgb(254,30,23)" fg:x="12713" fg:w="34"/><text x="66.3740%" y="110.50"></text></g><g><title>_save (pandas/io/excel/_xlsxwriter.py:226) (34 samples, 0.18%)</title><rect x="66.1240%" y="116" width="0.1768%" height="15" fill="rgb(235,160,14)" fg:x="12713" fg:w="34"/><text x="66.3740%" y="126.50"></text></g><g><title>close (xlsxwriter/workbook.py:310) (34 samples, 0.18%)</title><rect x="66.1240%" y="132" width="0.1768%" height="15" fill="rgb(212,155,44)" fg:x="12713" fg:w="34"/><text x="66.3740%" y="142.50"></text></g><g><title>_store_workbook (xlsxwriter/workbook.py:652) (34 samples, 0.18%)</title><rect x="66.1240%" y="148" width="0.1768%" height="15" fill="rgb(226,2,50)" fg:x="12713" fg:w="34"/><text x="66.3740%" y="158.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3756) (27 samples, 0.14%)</title><rect x="66.4413%" y="116" width="0.1404%" height="15" fill="rgb(234,177,6)" fg:x="12774" fg:w="27"/><text x="66.6913%" y="126.50"></text></g><g><title>__contains__ (pandas/core/indexes/base.py:5292) (22 samples, 0.11%)</title><rect x="67.1643%" y="148" width="0.1144%" height="15" fill="rgb(217,24,9)" fg:x="12913" fg:w="22"/><text x="67.4143%" y="158.50"></text></g><g><title>_ixs (pandas/core/frame.py:3701) (27 samples, 0.14%)</title><rect x="67.3307%" y="164" width="0.1404%" height="15" fill="rgb(220,13,46)" fg:x="12945" fg:w="27"/><text x="67.5807%" y="174.50"></text></g><g><title>_get_item_cache (pandas/core/frame.py:4264) (38 samples, 0.20%)</title><rect x="67.2787%" y="148" width="0.1976%" height="15" fill="rgb(239,221,27)" fg:x="12935" fg:w="38"/><text x="67.5287%" y="158.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3756) (110 samples, 0.57%)</title><rect x="66.9666%" y="132" width="0.5721%" height="15" fill="rgb(222,198,25)" fg:x="12875" fg:w="110"/><text x="67.2166%" y="142.50"></text></g><g><title>_get_values_for_loc (pandas/core/indexes/base.py:5972) (21 samples, 0.11%)</title><rect x="67.7416%" y="164" width="0.1092%" height="15" fill="rgb(211,99,13)" fg:x="13024" fg:w="21"/><text x="67.9916%" y="174.50"></text></g><g><title>_get_value (pandas/core/series.py:1075) (49 samples, 0.25%)</title><rect x="67.6688%" y="148" width="0.2549%" height="15" fill="rgb(232,111,31)" fg:x="13010" fg:w="49"/><text x="67.9188%" y="158.50"></text></g><g><title>__getitem__ (pandas/core/series.py:967) (85 samples, 0.44%)</title><rect x="67.5387%" y="132" width="0.4421%" height="15" fill="rgb(245,82,37)" fg:x="12985" fg:w="85"/><text x="67.7887%" y="142.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3756) (56 samples, 0.29%)</title><rect x="68.2669%" y="148" width="0.2913%" height="15" fill="rgb(227,149,46)" fg:x="13125" fg:w="56"/><text x="68.5169%" y="158.50"></text></g><g><title>_get_value (pandas/core/series.py:1075) (27 samples, 0.14%)</title><rect x="68.6778%" y="164" width="0.1404%" height="15" fill="rgb(218,36,50)" fg:x="13204" fg:w="27"/><text x="68.9278%" y="174.50"></text></g><g><title>calc_work_benefits (calc_benefit_types.py:26) (167 samples, 0.87%)</title><rect x="67.9809%" y="132" width="0.8686%" height="15" fill="rgb(226,80,48)" fg:x="13070" fg:w="167"/><text x="68.2309%" y="142.50"></text></g><g><title>__getitem__ (pandas/core/series.py:967) (56 samples, 0.29%)</title><rect x="68.5582%" y="148" width="0.2913%" height="15" fill="rgb(238,224,15)" fg:x="13181" fg:w="56"/><text x="68.8082%" y="158.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3756) (28 samples, 0.15%)</title><rect x="77.6501%" y="148" width="0.1456%" height="15" fill="rgb(241,136,10)" fg:x="14929" fg:w="28"/><text x="77.9001%" y="158.50"></text></g><g><title>calc_YLD (calc_benefit_types.py:65) (2,179 samples, 11.33%)</title><rect x="66.6077%" y="116" width="11.3336%" height="15" fill="rgb(208,32,45)" fg:x="12806" fg:w="2179"/><text x="66.8577%" y="126.50">calc_YLD (calc_be..</text></g><g><title>population_structure (population_structure.py:3) (1,748 samples, 9.09%)</title><rect x="68.8495%" y="132" width="9.0919%" height="15" fill="rgb(207,135,9)" fg:x="13237" fg:w="1748"/><text x="69.0995%" y="142.50">population_st..</text></g><g><title>__getitem__ (pandas/core/series.py:967) (28 samples, 0.15%)</title><rect x="77.7957%" y="148" width="0.1456%" height="15" fill="rgb(206,86,44)" fg:x="14957" fg:w="28"/><text x="78.0457%" y="158.50"></text></g><g><title>__contains__ (pandas/core/indexes/base.py:5292) (78 samples, 0.41%)</title><rect x="80.4640%" y="148" width="0.4057%" height="15" fill="rgb(245,177,15)" fg:x="15470" fg:w="78"/><text x="80.7140%" y="158.50"></text></g><g><title>_get_item_cache (pandas/core/frame.py:4264) (40 samples, 0.21%)</title><rect x="80.8697%" y="148" width="0.2081%" height="15" fill="rgb(206,64,50)" fg:x="15548" fg:w="40"/><text x="81.1197%" y="158.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2652) (38 samples, 0.20%)</title><rect x="81.1037%" y="148" width="0.1976%" height="15" fill="rgb(234,36,40)" fg:x="15593" fg:w="38"/><text x="81.3537%" y="158.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3756) (338 samples, 1.76%)</title><rect x="79.6317%" y="132" width="1.7580%" height="15" fill="rgb(213,64,8)" fg:x="15310" fg:w="338"/><text x="79.8817%" y="142.50"></text></g><g><title>_get_values_for_loc (pandas/core/indexes/base.py:5972) (64 samples, 0.33%)</title><rect x="82.2168%" y="164" width="0.3329%" height="15" fill="rgb(210,75,36)" fg:x="15807" fg:w="64"/><text x="82.4668%" y="174.50"></text></g><g><title>_values (pandas/core/series.py:709) (29 samples, 0.15%)</title><rect x="82.3988%" y="180" width="0.1508%" height="15" fill="rgb(229,88,21)" fg:x="15842" fg:w="29"/><text x="82.6488%" y="190.50"></text></g><g><title>_get_value (pandas/core/series.py:1075) (181 samples, 0.94%)</title><rect x="81.8891%" y="148" width="0.9414%" height="15" fill="rgb(252,204,47)" fg:x="15744" fg:w="181"/><text x="82.1391%" y="158.50"></text></g><g><title>get_loc (pandas/core/indexes/range.py:386) (54 samples, 0.28%)</title><rect x="82.5497%" y="164" width="0.2809%" height="15" fill="rgb(208,77,27)" fg:x="15871" fg:w="54"/><text x="82.7997%" y="174.50"></text></g><g><title>calc_daly_annual (calc_benefit_types.py:46) (983 samples, 5.11%)</title><rect x="77.9413%" y="116" width="5.1129%" height="15" fill="rgb(221,76,26)" fg:x="14985" fg:w="983"/><text x="78.1913%" y="126.50">calc_d..</text></g><g><title>__getitem__ (pandas/core/series.py:967) (320 samples, 1.66%)</title><rect x="81.3898%" y="132" width="1.6644%" height="15" fill="rgb(225,139,18)" fg:x="15648" fg:w="320"/><text x="81.6398%" y="142.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2652) (39 samples, 0.20%)</title><rect x="82.8513%" y="148" width="0.2029%" height="15" fill="rgb(230,137,11)" fg:x="15929" fg:w="39"/><text x="83.1013%" y="158.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3756) (89 samples, 0.46%)</title><rect x="83.3715%" y="132" width="0.4629%" height="15" fill="rgb(212,28,1)" fg:x="16029" fg:w="89"/><text x="83.6215%" y="142.50"></text></g><g><title>_get_values_for_loc (pandas/core/indexes/base.py:5972) (20 samples, 0.10%)</title><rect x="84.0893%" y="164" width="0.1040%" height="15" fill="rgb(248,164,17)" fg:x="16167" fg:w="20"/><text x="84.3393%" y="174.50"></text></g><g><title>_get_value (pandas/core/series.py:1075) (46 samples, 0.24%)</title><rect x="84.0060%" y="148" width="0.2393%" height="15" fill="rgb(222,171,42)" fg:x="16151" fg:w="46"/><text x="84.2560%" y="158.50"></text></g><g><title>__getitem__ (pandas/core/series.py:967) (89 samples, 0.46%)</title><rect x="83.8344%" y="132" width="0.4629%" height="15" fill="rgb(243,84,45)" fg:x="16118" fg:w="89"/><text x="84.0844%" y="142.50"></text></g><g><title>calc_education_benefits (calc_benefit_types.py:4) (281 samples, 1.46%)</title><rect x="83.0542%" y="116" width="1.4616%" height="15" fill="rgb(252,49,23)" fg:x="15968" fg:w="281"/><text x="83.3042%" y="126.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:177) (42 samples, 0.22%)</title><rect x="84.2973%" y="132" width="0.2185%" height="15" fill="rgb(215,19,7)" fg:x="16207" fg:w="42"/><text x="84.5473%" y="142.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2162) (35 samples, 0.18%)</title><rect x="84.3337%" y="148" width="0.1820%" height="15" fill="rgb(238,81,41)" fg:x="16214" fg:w="35"/><text x="84.5837%" y="158.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:69) (28 samples, 0.15%)</title><rect x="84.3701%" y="164" width="0.1456%" height="15" fill="rgb(210,199,37)" fg:x="16221" fg:w="28"/><text x="84.6201%" y="174.50"></text></g><g><title>__contains__ (pandas/core/indexes/base.py:5292) (62 samples, 0.32%)</title><rect x="86.8719%" y="148" width="0.3225%" height="15" fill="rgb(244,192,49)" fg:x="16702" fg:w="62"/><text x="87.1219%" y="158.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2652) (29 samples, 0.15%)</title><rect x="87.3297%" y="148" width="0.1508%" height="15" fill="rgb(226,211,11)" fg:x="16790" fg:w="29"/><text x="87.5797%" y="158.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3756) (258 samples, 1.34%)</title><rect x="86.1958%" y="132" width="1.3419%" height="15" fill="rgb(236,162,54)" fg:x="16572" fg:w="258"/><text x="86.4458%" y="142.50"></text></g><g><title>_get_values_for_loc (pandas/core/indexes/base.py:5972) (49 samples, 0.25%)</title><rect x="88.4063%" y="164" width="0.2549%" height="15" fill="rgb(220,229,9)" fg:x="16997" fg:w="49"/><text x="88.6563%" y="174.50"></text></g><g><title>_values (pandas/core/series.py:709) (22 samples, 0.11%)</title><rect x="88.5468%" y="180" width="0.1144%" height="15" fill="rgb(250,87,22)" fg:x="17024" fg:w="22"/><text x="88.7968%" y="190.50"></text></g><g><title>_get_value (pandas/core/series.py:1075) (157 samples, 0.82%)</title><rect x="88.0734%" y="148" width="0.8166%" height="15" fill="rgb(239,43,17)" fg:x="16933" fg:w="157"/><text x="88.3234%" y="158.50"></text></g><g><title>get_loc (pandas/core/indexes/range.py:386) (44 samples, 0.23%)</title><rect x="88.6612%" y="164" width="0.2289%" height="15" fill="rgb(231,177,25)" fg:x="17046" fg:w="44"/><text x="88.9112%" y="174.50"></text></g><g><title>calc_work_benefits (calc_benefit_types.py:26) (872 samples, 4.54%)</title><rect x="84.5158%" y="116" width="4.5355%" height="15" fill="rgb(219,179,1)" fg:x="16249" fg:w="872"/><text x="84.7658%" y="126.50">calc_..</text></g><g><title>__getitem__ (pandas/core/series.py:967) (291 samples, 1.51%)</title><rect x="87.5377%" y="132" width="1.5136%" height="15" fill="rgb(238,219,53)" fg:x="16830" fg:w="291"/><text x="87.7877%" y="142.50"></text></g><g><title>check_deprecated_indexers (pandas/core/indexing.py:2652) (28 samples, 0.15%)</title><rect x="88.9056%" y="148" width="0.1456%" height="15" fill="rgb(232,167,36)" fg:x="17093" fg:w="28"/><text x="89.1556%" y="158.50"></text></g><g><title>__contains__ (pandas/core/indexes/base.py:5292) (36 samples, 0.19%)</title><rect x="97.8103%" y="148" width="0.1872%" height="15" fill="rgb(244,19,51)" fg:x="18805" fg:w="36"/><text x="98.0603%" y="158.50"></text></g><g><title>_box_col_values (pandas/core/frame.py:4247) (42 samples, 0.22%)</title><rect x="98.1327%" y="180" width="0.2185%" height="15" fill="rgb(224,6,22)" fg:x="18867" fg:w="42"/><text x="98.3827%" y="190.50"></text></g><g><title>_ixs (pandas/core/frame.py:3701) (84 samples, 0.44%)</title><rect x="98.0703%" y="164" width="0.4369%" height="15" fill="rgb(224,145,5)" fg:x="18855" fg:w="84"/><text x="98.3203%" y="174.50"></text></g><g><title>iget (pandas/core/internals/managers.py:1117) (22 samples, 0.11%)</title><rect x="98.3928%" y="180" width="0.1144%" height="15" fill="rgb(234,130,49)" fg:x="18917" fg:w="22"/><text x="98.6428%" y="190.50"></text></g><g><title>_get_item_cache (pandas/core/frame.py:4264) (103 samples, 0.54%)</title><rect x="97.9975%" y="148" width="0.5357%" height="15" fill="rgb(254,6,2)" fg:x="18841" fg:w="103"/><text x="98.2475%" y="158.50"></text></g><g><title>__getitem__ (pandas/core/frame.py:3756) (212 samples, 1.10%)</title><rect x="97.5502%" y="132" width="1.1027%" height="15" fill="rgb(208,96,46)" fg:x="18755" fg:w="212"/><text x="97.8002%" y="142.50"></text></g><g><title>_get_values_for_loc (pandas/core/indexes/base.py:5972) (36 samples, 0.19%)</title><rect x="99.0014%" y="164" width="0.1872%" height="15" fill="rgb(239,3,39)" fg:x="19034" fg:w="36"/><text x="99.2514%" y="174.50"></text></g><g><title>_values (pandas/core/series.py:709) (25 samples, 0.13%)</title><rect x="99.0586%" y="180" width="0.1300%" height="15" fill="rgb(233,210,1)" fg:x="19045" fg:w="25"/><text x="99.3086%" y="190.50"></text></g><g><title>_get_value (pandas/core/series.py:1075) (70 samples, 0.36%)</title><rect x="98.8973%" y="148" width="0.3641%" height="15" fill="rgb(244,137,37)" fg:x="19014" fg:w="70"/><text x="99.1473%" y="158.50"></text></g><g><title>total_econ_benefits (all_countries_loop.py:64) (6,344 samples, 33.00%)</title><rect x="66.3164%" y="100" width="32.9970%" height="15" fill="rgb(240,136,2)" fg:x="12750" fg:w="6344"/><text x="66.5664%" y="110.50">total_econ_benefits (all_countries_loop.py:64)</text></g><g><title>population_structure (population_structure.py:3) (1,973 samples, 10.26%)</title><rect x="89.0513%" y="116" width="10.2621%" height="15" fill="rgb(239,18,37)" fg:x="17121" fg:w="1973"/><text x="89.3013%" y="126.50">population_stru..</text></g><g><title>__getitem__ (pandas/core/series.py:967) (127 samples, 0.66%)</title><rect x="98.6529%" y="132" width="0.6606%" height="15" fill="rgb(218,185,22)" fg:x="18967" fg:w="127"/><text x="98.9029%" y="142.50"></text></g><g><title>cell_wrapper (xlsxwriter/worksheet.py:73) (28 samples, 0.15%)</title><rect x="99.3862%" y="180" width="0.1456%" height="15" fill="rgb(225,218,4)" fg:x="19108" fg:w="28"/><text x="99.6362%" y="190.50"></text></g><g><title>write (xlsxwriter/worksheet.py:428) (25 samples, 0.13%)</title><rect x="99.4019%" y="196" width="0.1300%" height="15" fill="rgb(230,182,32)" fg:x="19111" fg:w="25"/><text x="99.6519%" y="206.50"></text></g><g><title>_write (xlsxwriter/worksheet.py:448) (24 samples, 0.12%)</title><rect x="99.4071%" y="212" width="0.1248%" height="15" fill="rgb(242,56,43)" fg:x="19112" fg:w="24"/><text x="99.6571%" y="222.50"></text></g><g><title>_format_regular_rows (pandas/io/formats/excel.py:705) (24 samples, 0.12%)</title><rect x="99.5423%" y="196" width="0.1248%" height="15" fill="rgb(233,99,24)" fg:x="19138" fg:w="24"/><text x="99.7923%" y="206.50"></text></g><g><title>_generate_body (pandas/io/formats/excel.py:837) (22 samples, 0.11%)</title><rect x="99.5527%" y="212" width="0.1144%" height="15" fill="rgb(234,209,42)" fg:x="19140" fg:w="22"/><text x="99.8027%" y="222.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:170) (73 samples, 0.38%)</title><rect x="99.3134%" y="100" width="0.3797%" height="15" fill="rgb(227,7,12)" fg:x="19094" fg:w="73"/><text x="99.5634%" y="110.50"></text></g><g><title>wrapper (pandas/util/_decorators.py:170) (73 samples, 0.38%)</title><rect x="99.3134%" y="116" width="0.3797%" height="15" fill="rgb(245,203,43)" fg:x="19094" fg:w="73"/><text x="99.5634%" y="126.50"></text></g><g><title>to_excel (pandas/core/generic.py:2201) (73 samples, 0.38%)</title><rect x="99.3134%" y="132" width="0.3797%" height="15" fill="rgb(238,205,33)" fg:x="19094" fg:w="73"/><text x="99.5634%" y="142.50"></text></g><g><title>write (pandas/io/formats/excel.py:858) (73 samples, 0.38%)</title><rect x="99.3134%" y="148" width="0.3797%" height="15" fill="rgb(231,56,7)" fg:x="19094" fg:w="73"/><text x="99.5634%" y="158.50"></text></g><g><title>_write_cells (pandas/io/excel/_xlsxwriter.py:232) (73 samples, 0.38%)</title><rect x="99.3134%" y="164" width="0.3797%" height="15" fill="rgb(244,186,29)" fg:x="19094" fg:w="73"/><text x="99.5634%" y="174.50"></text></g><g><title>get_formatted_cells (pandas/io/formats/excel.py:853) (31 samples, 0.16%)</title><rect x="99.5319%" y="180" width="0.1612%" height="15" fill="rgb(234,111,31)" fg:x="19136" fg:w="31"/><text x="99.7819%" y="190.50"></text></g><g><title>concatenate_managers (pandas/core/internals/concat.py:176) (27 samples, 0.14%)</title><rect x="99.8024%" y="148" width="0.1404%" height="15" fill="rgb(241,149,10)" fg:x="19188" fg:w="27"/><text x="100.0524%" y="158.50"></text></g><g><title>concat (pandas/core/reshape/concat.py:147) (49 samples, 0.25%)</title><rect x="99.6931%" y="116" width="0.2549%" height="15" fill="rgb(249,206,44)" fg:x="19167" fg:w="49"/><text x="99.9431%" y="126.50"></text></g><g><title>get_result (pandas/core/reshape/concat.py:566) (31 samples, 0.16%)</title><rect x="99.7867%" y="132" width="0.1612%" height="15" fill="rgb(251,153,30)" fg:x="19185" fg:w="31"/><text x="100.0367%" y="142.50"></text></g><g><title>run_sensitivity_analysis (sensitivity_analysis.py:3) (12,668 samples, 65.89%)</title><rect x="34.0632%" y="84" width="65.8899%" height="15" fill="rgb(239,152,38)" fg:x="6549" fg:w="12668"/><text x="34.3132%" y="94.50">run_sensitivity_analysis (sensitivity_analysis.py:3)</text></g><g><title>wrapper (pandas/util/_decorators.py:308) (50 samples, 0.26%)</title><rect x="99.6931%" y="100" width="0.2601%" height="15" fill="rgb(249,139,47)" fg:x="19167" fg:w="50"/><text x="99.9431%" y="110.50"></text></g><g><title>all (19,226 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(244,64,35)" fg:x="0" fg:w="19226"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (UI_economic_benefits.py:1) (19,226 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(216,46,15)" fg:x="0" fg:w="19226"/><text x="0.2500%" y="78.50">&lt;module&gt; (UI_economic_benefits.py:1)</text></g></svg></svg>